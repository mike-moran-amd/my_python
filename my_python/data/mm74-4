Microsoft Windows [Version 10.0.19044.1889]
(c) Microsoft Corporation. All rights reserved.

C:\Users\mikmoran>ssh mfm@145.40.99.43
Welcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-33-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Aug 31 18:43:19 UTC 2022

  System load:                0.02978515625
  Usage of /:                 15.9% of 218.06GB
  Memory usage:               10%
  Swap usage:                 0%
  Processes:                  645
  Users logged in:            0
  IPv4 address for bond0:     145.40.99.43
  IPv6 address for bond0:     2604:1380:4641:3b00::d
  IPv4 address for mpqemubr0: 10.52.247.1

 * Super-optimized for small spaces - read how we shrank the memory
   footprint of MicroK8s to make it the smallest full K8s around.

   https://ubuntu.com/blog/microk8s-memory-optimisation

45 updates can be applied immediately.
1 of these updates is a standard security update.
To see these additional updates run: apt list --upgradable


1 updates could not be installed automatically. For more details,
see /var/log/unattended-upgrades/unattended-upgrades.log

*** System restart required ***
Last login: Tue Aug 30 18:21:04 2022 from 70.112.73.191
Welcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-33-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Aug 31 18:43:19 UTC 2022

  System load:                0.02978515625
  Usage of /:                 15.9% of 218.06GB
  Memory usage:               10%
  Swap usage:                 0%
  Processes:                  645
  Users logged in:            0
  IPv4 address for bond0:     145.40.99.43
  IPv6 address for bond0:     2604:1380:4641:3b00::d
  IPv4 address for mpqemubr0: 10.52.247.1

 * Super-optimized for small spaces - read how we shrank the memory
   footprint of MicroK8s to make it the smallest full K8s around.

   https://ubuntu.com/blog/microk8s-memory-optimisation

45 updates can be applied immediately.
1 of these updates is a standard security update.
To see these additional updates run: apt list --upgradable


1 updates could not be installed automatically. For more details,
see /var/log/unattended-upgrades/unattended-upgrades.log

*** System restart required ***
Last login: Tue Aug 30 18:21:04 2022 from 70.112.73.191
mfm@mm74:~$ history
  405  kubectl get pvpvc
  406  kubectl get pvc
  407  kubectl delete pvc weathervane-test-claim
  408  kubectl get sc
  409  kubectl delete sc local-storage
  410  vim create-storage-class.yaml
  411  kubectl apply -f create-storage-class.yaml
  412  kubectl get sc
  413  kubectl apply -f test-pvc.yaml
  414  kubectl get pvc
  415  kubectl describe pvc weathervane-test-claim
  416  vim create-persistent-vol.yaml
  417  mkdir /k8s/weathervane/vol/v01
  418  mkdir /k8s/weathervane/vol/v02
  419  mkdir /k8s/weathervane/vol/v03
  420  mkdir /k8s/weathervane/vol/v04
  421  mkdir /k8s/weathervane/vol/v05
  422  cp create-persistent-vol.yaml pv01.yaml
  423  cp create-persistent-vol.yaml pv02.yaml
  424  cp create-persistent-vol.yaml pv03.yaml
  425  cp create-persistent-vol.yaml pv04.yaml
  426  cp create-persistent-vol.yaml pv05.yaml
  427  vim pv01.yaml
  428  vim pv02.yaml
  429  vim pv03.yaml
  430  vim pv04.yaml
  431  vim pv05.yaml
  432  kubectl get pvc
  433  kubectl delete pvc weathervane-test-claim
  434  vim pv01.yaml
  435  vim pv02.yaml
  436  vim pv03.yaml
  437  kubectl apply -f pv01.yaml pv02.yaml pv03.yaml
  438  kubectl apply -f pv01.yaml
  439  kubectl apply -f pv02.yaml
  440  kubectl apply -f pv03.yaml
  441  kubectl get storage
  442  kubectl get sc
  443  vim test-pvc.yaml
  444  vim pvc2.yaml
  445  cp pvc2.yaml pvc3.yaml
  446  vim pvc3.yaml
  447  kubectl apply -f test-pvc.yaml
  448  kubectl apply -f pvc2.yaml
  449  kubectl apply -f pvc3.yaml
  450  kubectl get pvc
  451  kubectl delete pvc weathervane-test-claim weathervane-test-claim-02 weathervane-test-claim-03
  452  history | grep run
  453  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  454  kubectl get pvs
  455  kubectl get pvc
  456  kubectl get pv
  457  kubectl get sc
  458  kubectl get pv
  459  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  460  ls -alt
  461  ifconfig
  462  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  463  kubectl get pvs
  464  kubectl get pvc
  465  kubectl get pvc weathervane-test-claim -o yaml
  466  kubectl get pvc weathervane-test-claim -o yaml > p.yaml
  467  cd weathervane/
  468  vim wv-pvc.yaml
  469  kubectl apply -f wv-pvc.yaml
  470  kubectl get pvc
  471  kubectl get pv
  472  kubectl get pvc
  473  kubectl apply -f pvc2.yaml
  474  kubectl get pvc
  475  kubectl get nodes
  476  kubectl get pvc
  477  cd weathervane/
  478  kubectl get pvc
  479  kubectl get pv
  480  kubectl get sc
  481  ls /k8s/weathervane/vol/
  482  kubectl get pv
  483  kubectl describe pvc weathervane-test-claim
  484  kubectl get sc
  485  ./runWeathervane.pl --help
  486  kubectl get pvc
  487  kubectl delete pvc weathervane-test-claim
  488  kubectl delete pvc weathervane-test-claim-02
  489  kubectl get pv
  490  kubectl delete pv weathervane-pv1
  491  kubectl delete pv weathervane-pv2
  492  kubectl delete pv weathervane-pv3
  493  kubectl sc
  494  kubectl get sc
  495  vim runWeathervane.pl
  496  kubectl apply -f pv01.yaml
  497  kubectl apply -f pv02.yaml
  498  kubectl apply -f pv03.yaml
  499  kubectl get pv
  500  vim runWeathervane.pl
  501  history | grep run
  502  ./runWeathervane.pl  --configFile=weathervane.config.k8s.quickstart
  503  kubectl get pv
  504  kubectl get pvc
  505  kubectl get pvc --all-namespace
  506  kubectl get pvc --all-namespaces
  507  kubectl get ns
  508  docker
  509  sudo apt install docker.io
  510  docker
  511  sudo apt install podman-docker
  512  dock
  513  podman
  514  podman ps -a
  515  vim runWeathervane.pl
  516  docker
  517  sudo apt remove podman-docker
  518  sudo apt purge podman-docker
  519  podman ps -a
  520  sudo apt install docker.io
  521  sudo apt install containerd.io docker.io
  522  podma
  523  podman
  524  podmannamespave
  525  podmannamespace
  526  podmannamespaces
  527  dockernamespave
  528  dockernamespace
  529  vim runWeathervane.pl
  530  sudo apt install podman-docker
  531  which podman
  532  sudo ln -s /usr/bin/docker /usr/bin/podman
  533  sudo ln -s /usr/bin/podman /usr/bin/docker
  534  ls /usr/bin/docker
  535  docker
  536  docker ps -a
  537  history | grep run
  538  ./runWeathervane.pl  --configFile=weathervane.config.k8s.quickstart
  539  cd weathervane/
  540  ls -lat
  541  ./buildDockerImages.pl --username psonemal
  542  vim buildDockerImages.log
  543  cat buildDockerImages.
  544  cat buildDockerImages.log
  545  docker run --name weathervane-builder --rm -v /home/mfm/weathervane/.gradle:/root/.gradle -v /home/mfm/weathervane:/root/weathervane -w /root/weathervane --entrypoint /root/weathervane/gradlew openjdk:8
  546  hostname
  547  ./buildDockerImages.pl --private --host mm74
  548  cat buildDockerImages.log
  549  cat /etc/containers/registries.conf
  550  ./buildDockerImages.pl --username psonemal
  551  cat buildDockerImages.log
  552  history
  553  ll
  554  history > history_220819
  555  cd weathervane/
  556  ls
  557  ls -lrt
  558  cat buildDockerImages.log
  559  tail ~/.ssh/authorized_keys
  560  cat buildDockerImages.pl
  561  ./buildDockerImages.pl --username mikemoranamd
  562  cat buildDockerImages.log
  563  who
  564  cd weathervane/
  565  cat pv01.yaml
  566  cat pv02.yaml
  567  cat pv03.yaml
  568  cat pv04.yaml
  569  cat pv05.yaml
  570  cat pvc2.yaml
  571  cat pvc3.yaml
  572  cat wv-pvc.yaml
  573  git status
  574  ./runWeathervane.pl --skipPvTest --configFile=weathervane.config.k8s.quickstart
  575  locate Term/ReadKey.pm
  576  sudo apt install plocate
  577  sudo apt install mlocate
  578  locate Term/ReadKey.pm
  579  cpan Term::ReadKey
  580  sudo cpan Term::ReadKey
  581  ./runWeathervane.pl --skipPvTest --configFile=weathervane.config.k8s.quickstart
  582  sudo ./runWeathervane.pl --skipPvTest --configFile=weathervane.config.k8s.quickstart
  583  cd weathervane/
  584  kubectl get pv
  585  kubectl get pvc
  586  ls -lat
  587  vim buildDockerImages.log
  588  docker ps -a
  589  docker iamge ls
  590  docker image ls
  591  cat buildDockerImages.log
  592  docker run --name weathervane-builder
  593  vim buildDockerImages.pl
  594  ./buildDockerImages.pl --username psonemal@amd.com
  595  cat buildDockerImages.log.
  596  ./buildDockerImages.pl --username psonemal
  597  cat buildDockerImages.log.
  598  cat buildDockerImages.log
  599  cat /etc/containers/registries.conf
  600  cat buildDockerImages.log
  601  podman compose
  602  podman-compose up
  603  vim /etc/containers/registries.conf
  604  sudo vim /etc/containers/registries.conf
  605  ./buildDockerImages.pl --username psonemal
  606  kubectl get pv
  607  kubectl get pvc
  608  kubectl get sc
  609  history | grep kubectl
  610  kubectl get pvc
  611  kubectl get pvc --all-namespaces
  612  kubectl get pvc --all-namespace
  613  kubectl get pvc --all-namespaces
  614  kubectl get pvc
  615  kubectl get pvc --all-namespaces
  616  kubectl get pv --all-namespaces
  617  kubectl delete pv weathervane-pv1
  618  kubectl delete pv weathervane-pv2
  619  kubectl delete pv weathervane-pv3
  620  kubectl apply -f pv01.yaml
  621  kubectl apply -f pv02.yaml
  622  kubectl apply -f pv03.yaml
  623  kubectl get pv
  624  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  625  ./runWeathervane.pl --help
  626  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/output
  627  vim runWeathervane.pl
  628  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/outDir --tmpDir  /home/mfm/weathervane/tmpDir
  629  ls outDir/
  630  ls tmpDir/
  631  exit
  632  cat /etc/containers/registries.conf
  633  podman ps -a
  634  kubectl get pv
  635  kubectl get pvc
  636  kubectl get pvc --all-namespaces
  637  kubectl get pv --all-namespaces
  638  kubectl get pvc --all-namespaces
  639  cd weathervane/
  640  ls -lat tmpDir/
  641  ls -lat  outDir/
  642  cat outDir/sequence.num
  643  top
  644  docker ps -a
  645  history | grep run
  646  kubectl get sc
  647  kubectl get pv --all-namespaces
  648  kubectl get sc
  649  kubectl get pvc --all-namespaces
  650  exit
  651  kubectl get pv
  652  kubectl get pvc
  653  kubectl get sc
  654  cd weathervane/
  655  vim
  656  ls
  657  cat weathervane.config.k8s.quickstart
  658  uname -a
  659  ll
  660  which zip
  661  which pkzip
  662  cd weathervane/
  663  ls
  664  ls -lrt
  665  cd ..
  666  cp -R weathervane/ weathervane_backup
  667  ll
  668  cd weathervane_backup/
  669  ll
  670  cd ..
  671  du -s *
  672  cd weathervane
  673  ll
  674  history | grep quickstart
  675  history
  676  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/outDir --tmpDir  /home/mfm/weathervane/tmpDir
  677  kubectl get pv
  678  who
  679  curl curl localhost:c4231//SEV_Dashboard
  680  kubectl get pv
  681  cd weathervane/
  682  ll
  683  cat pv01.yaml
  684  kubectl get pvc
  685  kubectl get pv
  686  uptime
  687  ps -a
  688  cd /tmp
  689  ll
  690  cd 220824191813/
  691  ll
  692  ll outDir/
  693  cat outDir/sequence.num
  694  ll tmpDir/
  695  date
  696  uptime
  697  kubectl get pods
  698  kubectl get pods --all-namespaces
  699  uptime
  700  kubectl get pods --all-namespaces
  701  uptime
  702  kubectl get pods --all-namespaces
  703  uptime
  704  kubectl get pods --all-namespaces
  705  uptime
  706  kubectl get pods --all-namespaces
  707  uptime; kubectl get pods --all-namespaces
  708  cd ..
  709  ll
  710  cd 220824201306/
  711  ll
  712  cat z
  713  kubectl get pvc --all-namespaces
  714  cd ..
  715  lw
  716  lq
  717  ls
  718  cd 220824191813
  719  ls
  720  cat ZOUT
  721  while read line; do     echo "line: $line"; done < ($kubectl get pvc --all-namespaces)
  722  while read line; do     echo "line: $line"; done < `$kubectl get pvc --all-namespaces`
  723  for line in `kubectl get pvc --all-namespaces`; do echo "line: $line"; done
  724  jobs
  725  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
  726  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  727  kubectl delete pv weathervane-pv1
  728  kubectl delete pv weathervane-pv2
  729  kubectl delete pv weathervane-pv3
  730  cd ..
  731  ll
  732  cd 220824201306
  733  cat ZOUT
  734  cd
  735  cd weathervane
  736  ls
  737  cat create-storage-class.yaml
  738  cat weathervane.config.k8s.quickstart
  739  uptime; kubectl get pods --all-namespaces
  740  ls
  741  ps -a
  742  vi z
  743  cat z
  744  uptime; kubectl get pods --all-namespaces
  745  kubectl get sc --all-namespaces
  746  vi create-storage-class.yaml
  747  kubectl get sc --all-namespaces
  748  kubectl create -f create-storage-class.yaml
  749  kubectl get sc --all-namespaces
  750  vi create-storage-class.yaml
  751  kubectl delete sc local-storage2
  752  vi create-storage-class.yaml
  753  kubectl get sc --all-namespaces
  754  vi pv0*.yaml
  755  cat z
  756  uptime; kubectl get pods --all-namespaces
  757  who
  758  uptime; kubectl get pods --all-namespaces
  759  df /tmp
  760  uptime; kubectl get pods --all-namespaces
  761  docker logs tomcat-5579768996-jpqbc
  762  ls
  763  ,cat weathervane.config.k8s.quickstart
  764  cat weathervane.config.k8s.quickstart
  765  vi z
  766  uptime; kubectl get pods --all-namespaces
  767  ll /tmp
  768  uptime; kubectl get pods --all-namespaces
  769  cat z
  770  uptime; kubectl get pods --all-namespaces
  771  cd /tmp
  772  ll
  773  cd 220824224449/
  774  cat ZOUT
  775  uptime; kubectl get pods --all-namespaces
  776  who
  777  ls
  778  cd weathervane
  779  ll
  780  history > ~/history_220824
  781  vi ~/history_220824
  782  cat /etc/containers/registries.conf
  783  ls
  784  test
  785  which test
  786  run
  787  vi z
  788  df .
  789  df /tmp
  790  fg
  791  ./z
  792  . z
  793  ll /tmp
  794  ls
  795  cat z
  796  ls Z_DIR/
  797  cat Z_DIR/z
  798  rm Z_DIR/z
  799  rmdir Z_DIR/
  800  fg
  801  ./z
  802  . z
  803  ll /tmp
  804  ll /tmp/220824174547
  805  cat /tmp/220824174547/ZOUTPUT
  806  fg
  807  . z
  808  cd /tmp/220824175727
  809  ll
  810  cat ZOUT
  811  ls
  812  cat weathervane.config.k8s.quickstart
  813  ls
  814  cd outDir/
  815  ll
  816  cd ../tmpDir/
  817  ll
  818  cd
  819  cd weathervane
  820  fg
  821  ll
  822  ll *.yaml
  823  fg
  824  .  z
  825  ll /tmp/220824180359
  826  ll /tmp
  827  fg
  828  ls
  829  git status
  830  git diff runWeathervane.pl
  831  jobs
  832  vi runWeathervane.pl
  833  kubectl get pv
  834  cat pv01.yaml
  835  kubectl get pvc
  836  kubectl get pvc --all-namespaces
  837  kubectl get pv --all-namespaces
  838  vi z
  839  jobs
  840  ll /tmp
  841  . z
  842  ll /tmp/220824182631
  843  vi z
  844  kubectl get pv
  845  kubectl get pvc
  846  kubectl get sc
  847  kubectl get pv --all-namespaces
  848  kubectl get pvc --all-namespaces
  849  kubectl get sc --all-namespaces
  850  jobs
  851  cat create-storage-class.yaml
  852  jobs
  853  fg
  854  . z
  855  cd /tmp/220824184936
  856  ll
  857  cat ZOUT
  858  1fg
  859  cd
  860  cd weathervane
  861  fg
  862  . z
  863  cat /tmp/220824185250/ZOUT
  864  fg
  865  kubectl delete pvc cassandra-data-cassandra-0
  866  kubectl delete pvc cassandra-data-cassandra-0 -ns auctionw1i1
  867  kubectl delete pvc cassandra-data-cassandra-0 -namespace auctionw1i1
  868  kubectl delete pvc cassandra-data-cassandra-0 --namespace auctionw1i1
  869  kubectl get pvc --all-namespaces
  870  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  871  kubectl get pvc --all-namespaces
  872  fg
  873  . z
  874  kubectl get pvc --all-namespaces
  875  kubectl delete pv weathervane-pv1
  876  kubectl get pv --all-namespaces
  877  kubectl apply -f pv01.yaml
  878  kubectl get pv --all-namespaces
  879  kubectl delete pv weathervane-pv2
  880  kubectl delete pv weathervane-pv3
  881  kubectl apply -f pv02.yaml
  882  kubectl apply -f pv03.yaml
  883  kubectl get pv --all-namespaces
  884  g
  885  fg
  886  . z
  887  cd /tmp/220824191813
  888  ll
  889  ll outDir/
  890  ll tmpDir/
  891  kubectl get pv --all-namespaces
  892  kubectl get pvc --all-namespaces
  893  kubectl get sc --all-namespaces
  894  kubectl describe sc local-storage
  895  jobs
  896  fg
  897  which awk
  898  kubectl delete pvc cassandra-data-cassandra-0 --namespace auctionw1i1
  899  kubectl delete pvc postgresql-postgresql-0 --namespace auctionw1i1
  900  kubectl get pvc --all-namespaces
  901  kubectl get pv --all-namespaces
  902  kubectl delete pv weathervane-pv1
  903  kubectl delete pv weathervane-pv2
  904  kubectl delete pv weathervane-pv3
  905  kubectl get sc --all-namespaces
  906  kubectl get pv --all-namespaces
  907  kubectl get pvc --all-namespaces
  908  ls
  909  vi pv01.yaml
  910  vi pv02.yaml
  911  vi pv03.yaml
  912  # changed 10Gi to 20Gi
  913  kubectl apply -f pv01.yaml
  914  kubectl apply -f pv02.yaml
  915  kubectl apply -f pv03.yaml
  916  fg
  917  cd
  918  cd weathervane\
  919  cd weathervane
  920  kubectl get pvc --all-namespaces
  921  kubectl get pv --all-namespaces
  922  ls
  923  vi pv01.yaml pv02.yaml pv03.yaml
  924  cat pv01.yaml pv02.yaml pv03.yaml
  925  . z
  926  jobs
  927  vi z
  928  vi pv0*.yaml
  929  kubectl get sc --all-namespaces
  930  kubectl get pv --all-namespaces
  931  kubectl get pvc --all-namespaces
  932  vi z
  933  cd
  934  cd weathervane
  935  . z
  936  jobs
  937  vi z
  938  . z
  939  vi z
  940  . z
  941  vi z
  942  . z
  943  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
  944  kubectl get pvc --all-namespaces
  945  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  946  kubectl get pvc --all-namespaces
  947  kubectl get sc --all-namespaces
  948  kubectl get pv --all-namespaces
  949  kubectl delete pv weathervane-pv1
  950  kubectl delete pv weathervane-pv2
  951  kubectl get pv --all-namespaces
  952  kubectl delete pv weathervane-pv3
  953  kubectl get pv --all-namespaces
  954  kubectl get pvc --all-namespaces
  955  kubectl get sc --all-namespaces
  956  kubectl get pvc --all-namespaces
  957  kubectl get pv --all-namespaces
  958  vi create-
  959  vi create-storage-class.yaml
  960  cp create-storage-class.yaml create-storage-class2.yaml
  961  vi create-storage-class2.yaml
  962  vi z
  963  ls
  964  cp pv01.yaml pv04.yaml
  965  cp pv02.yaml pv05.yaml
  966  cp pv03.yaml pv06.yaml
  967  vi pv04.yaml pv05.yaml pv06.yaml
  968  cat z
  969  . z
  970  jobs
  971  ls
  972  vi weathervane.config.k8s.quickstart
  973  kubectl get sc --all-namespaces
  974  kubectl get pv --all-namespaces
  975  kubectl delete pv weathervane-pv1-2
  976  kubectl delete pv weathervane-pv2-2
  977  kubectl delete pv weathervane-pv3-2
  978  kubectl get pv --all-namespaces
  979  kubectl get pvc --all-namespaces
  980  cat z
  981  kubectl get sc --all-namespaces
  982  kubectl delete sc local-storage2
  983  kubectl get sc --all-namespaces
  984  kubectl get pv --all-namespaces
  985  kubectl get pvc --all-namespaces
  986  cat z
  987  . z
  988  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
  989  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  990  kubectl get pvc --all-namespaces
  991  kubectl get pv --all-namespaces
  992  kubectl delete pv weathervane-pv1-2
  993  kubectl delete pv weathervane-pv2-2
  994  kubectl delete pv weathervane-pv3-2
  995  kubectl get pv --all-namespaces
  996  kubectl get sc --all-namespaces
  997  kubectl delete sc local-storage2
  998  kubectl get sc --all-namespaces
  999  kubectl get pv --all-namespaces
 1000  kubectl get pvc --all-namespaces
 1001  jobs
 1002  vi create-storage-class.yaml
 1003  vi runWeathervane.pl
 1004  ll
 1005  . z
 1006  ls
 1007  ca pv01.yaml
 1008  cat pv01.yaml
 1009  cat weathervane.config.k8s.quickstart
 1010  vi weathervane.config.k8s.quickstart
 1011  kubectl get sc --all-namespaces
 1012  cat weathervane.config.k8s.quickstart
 1013  kubectl get sc --all-namespaces
 1014  kubectl get pv --all-namespaces
 1015  kubectl get pvc --all-namespaces
 1016  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
 1017  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
 1018  kubectl get pvc --all-namespaces
 1019  kubectl get pv --all-namespaces
 1020  jobs
 1021  vi z
 1022  . z
 1023  cat z
 1024  history
 1025  cd weathervane
 1026  ls -alt
 1027  vim z
 1028  kubectl get pv --all-namespaces
 1029  kubectl get pvc --all-namespaces
 1030  kubectl get pods --all-namespaces
 1031  ls tmpDir/
 1032  ls -lat tmpDir/
 1033  ls -lat output/
 1034  ls -lat outDir/
 1035  cat outDir/sequence.num
 1036  podman ps -a
 1037  ls
 1038  kubectl get pvc --all-namespaces
 1039  kubectl get events --all-namespaces
 1040  kubectl get events
 1041  history | grep "run"
 1042  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/outDir --tmpDir  /home/mfm/weathervane/tmpDir
 1043  vim weathervane.config.k8s.quickstart
 1044  cd outDir/1/
 1045  ls -lat
 1046  vim debug.log
 1047  cd weathervane
 1048  ls -lat
 1049  ls outDir/
 1050  ls -lat tmpDir/
 1051  ls outDir/0/
 1052  ls outDir/0/1
 1053  kubectl get pods --all-namespaces
 1054  podman ps -a
 1055  kubectl describe pod cassandra-0 -ns auctionw1i1
 1056  kubectl describe pod cassandra-0 -n auctionw1i1
 1057  kubectl describe pod postgresql-0  -n auctionw1i1
 1058  top
 1059  !
 1060  kubectl get pods --all-namespaces
 1061  podman ps -a
 1062  top
 1063  kubectl get pods --all-namespaces
 1064  top
 1065  kubectl get pods --all-namespaces
 1066  kubectl describe pod tomcat-85d4b5fc8f-cdcvk -n auctionw1i1
 1067  kubectl describe pod tomcat-85d4b5fc8f-cdcvk -n auctionw1i1 > tomcat.pod.log
 1068  kubectl describe pod tomcat-85d4b5fc8f-cdcvk -n auctionw1i1
 1069  kubectl get pods --all-namespaces
 1070  kubectl describe pod zookeeper-0 -n auctionw1i1
 1071  kubectl describe pod zookeeper-0 -n auctionw1i1 > zookeeper.pod
 1072  kubectl get pods --all-namespaces
 1073  kubectl describe pod rabbitmq-5bbc8874bb-r64k4 -n auctionw1i1
 1074  kubectl describe pod rabbitmq-5bbc8874bb-r64k4 -n auctionw1i1 > rabbitmq.pod
 1075  kubectl get pods --all-namespaces
 1076  kubectl describe pod postgresql-0 -n auctionw1i1
 1077  kubectl describe pod postgresql-0 -n auctionw1i1 > postgresql.pod
 1078  kubectl get pods --all-namespaces
 1079  kubectl describe pod cassandra-0 -n auctionw1i1 > cassandra.pod
 1080  cat cassandra.pod
 1081  kubectl get pvc --all-namespace
 1082  kubectl get pvc --all-namespaces
 1083  kubectl get pvc --all-namespaces > pvcs.log
 1084  kubectl get pv --all-namespaces
 1085  kubectl get pv --all-namespaces > pvs.log
 1086  kubectl describe pv weathervane-pv1
 1087  kubectl describe pv weathervane-pv1 > pv1.describe
 1088  kubectl describe pv weathervane-pv2
 1089  kubectl describe pv weathervane-pv2 > pv2.describe
 1090  kubectl get pvc --all-namespaces
 1091  kubectl describe pvc cassandra-data-cassandra-0
 1092  kubectl describe pvc cassandra-data-cassandra-0 -n auctionw1i1
 1093  kubectl describe pvc cassandra-data-cassandra-0 -n auctionw1i1 > cassandra.data.pvc
 1094  kubectl describe pvc postgresql-postgresql-0 -n auctionw1i1 > postgresql.data.pvc
 1095  cat postgresql.data.pvc
 1096  kubectl get pvc --all-namespaces
 1097  kubectl get pods --all-namespaces
 1098  kubectl describe pod cassandra-0 -n auctionw1i1
 1099  ls
 1100  mkdir Som_logs
 1101  mv *.pod Som_logs/
 1102  mv *.describe Som_logs/
 1103  ls
 1104  mv tomcat.pod.log Som_logs/
 1105  mv cassandra.data.pvc Som_logs/
 1106  mv postgresql.data.pvc Som_logs/
 1107  cd Som_logs/
 1108  ls -lat
 1109  vim tomcat.pod.log
 1110  cat rabbitmq.pod
 1111  ls -lat
 1112  cat rabbitmq.pod
 1113  ls -lat
 1114  vim zookeeper.pod
 1115  vim postgresql.pod
 1116  vim cassandra.pod
 1117  vim tomcat.pod.log
 1118  mv tomcat.pod.log tomcat.pod
 1119  vim tomcat.pod
 1120  history > history_220825
 1121  vi history_220825
 1122  ls
 1123  cd weathervane
 1124  ll
 1125  cd Som_logs
 1126  ll
 1127  cat cassandra.data.pvc
 1128  cat cassandra.pod
 1129  cat postgresql.data.pvc
 1130  cat postgresql.pod
 1131  cat pv1.describe
 1132  cat pv2.describe
 1133  cat rabbitmq.pod
 1134  cat tomcat.pod
 1135  cat zookeeper.pod
 1136  cd ..
 1137  vi z
 1138  kubectl get sc --all-namespaces
 1139  fg
 1140  kubectl get pv --all-namespaces
 1141  kubectl get pvc --all-namespaces
 1142  fg
 1143  cat z
 1144  ls
 1145  cd /tmp
 1146  ls
 1147  cd 220824231635
 1148  ls
 1149  cat ZOUT
 1150  cd
 1151  cd weathervane
 1152  ll
 1153  vi weathervane.config.k8s.quickstart
 1154  vi weathervane.config.k8s.micro
 1155  cd configFiles/
 1156  ll
 1157  cd kubernetes/
 1158  ll
 1159  vi auctionbidservice.yaml
 1160  vi tomcat.yaml
 1161  vi auctionbidservice.yaml
 1162  cd ..
 1163  ls
 1164  vi weathervane.config.k8s.micro
 1165  cd configFiles/
 1166  ls
 1167  cd kubernetes/
 1168  ls
 1169  ll
 1170  vi auctionbidservice.yaml
 1171  vi tomcat.yaml
 1172  1fg
 1173  fg
 1174  ls
 1175  grep 8080 *
 1176  git status
 1177  cd ../..
 1178  ll
 1179  cat z
 1180  . z
 1181  uptime
 1182  kubectl get pods --all-namespaces
 1183  kubectl describe pod -n auctionw1i1 auctiondatamanager-6596b459df-5fvjz,
 1184  kubectl get pods --all-namespaces
 1185  kubectl describe pod -n auctionw1i1 auctiondatamanager-6596b459df-5fvjz
 1186  kubectl get pods --all-namespaces
 1187  kubectl describe pod -n auctionw1i1 cassandra-0
 1188  kubectl get pods --all-namespaces
 1189  kubectl describe pod -n auctionw1i1 postgresql-0
 1190  kubectl get pods --all-namespaces
 1191  kubectl describe pod -n auctionw1i1 rabbitmq-788c88588-jclq4
 1192  kubectl get pods --all-namespaces
 1193  kubectl describe pod -n auctionw1i1 zookeeper-0
 1194  kubectl get pods --all-namespaces
 1195  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1196  kubectl get pods --all-namespaces
 1197  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1198  kubectl get pods --all-namespaces
 1199  kubectl describe pod -n auctionw1i1 cassandra-0
 1200  kubectl describe pod -n auctionw1i1 postgresql-0
 1201  kubectl describe pod -n auctionw1i1 rabbitmq-788c88588-jclq4
 1202  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1203  kubectl describe pod -n auctionw1i1 zookeeper-0
 1204  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1205  cd weathervane/configFiles/kubernetes
 1206  grep 8080 *
 1207  kubectl get pods --all-namespaces
 1208  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1209  kubectl get pods --all-namespaces -a
 1210  kubectl get pods --all-namespaces
 1211  kubectl get pods --help
 1212  ls
 1213  kubectl apply -f aucbidservice.yaml
 1214  ls
 1215  kubectl apply -f auctionbidservice.yaml
 1216  kubectl get pods --all-namespaces
 1217  kubectl describe pod auctionbidservice-c69f955d8-wfmw7
 1218  who
 1219  kubectl get pods
 1220  kubectl get pods --all-namespaces --wide
 1221  kubectl get pods --all-namespaces -o wide
 1222  history > history_220826
 1223  vi history_220826
 1224  who
 1225  cd weathervane
 1226  ll
 1227  cd runHarness/
 1228  ls
 1229  ll
 1230  cat Instance.pm
 1231  cd ..
 1232  z
 1233  ls
 1234  . z
 1235  cd configFiles/kubernetes/
 1236  git status
 1237  cp auctionbidservice.yaml ~/.
 1238  git restore auctionbidservice.yaml
 1239  git status
 1240  ls /tmp
 1241  cat /tmp/220826171934/ZOUT
 1242  who
 1243  cd ../..
 1244  vi z
 1245  . z
 1246  man snap
 1247  history
 1248  cd /tmp
 1249  ls
 1250  cd 220826171934
 1251  ll
 1252  kubectl get pods --all-namespaces
 1253  kubectl describe pod -n auctionw1i1 cassandra-0
 1254  kubectl get pods --all-namespaces
 1255  kubectl describe pod -n auctionw1i1 auctiondatamanager-6596b459df-kfbz7
 1256  kubectl get pods --all-namespaces
 1257  kubectl describe pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4
 1258  docker logs tomcat-65d56c9bd4-rn2l4
 1259  docker logs tomcat-65d56c9bd4-rn2l4 -n auctionw1i1
 1260  kubectl get pods --all-namespaces
 1261  kubectl describe pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4
 1262  kubectl get events
 1263  kubectl get pods --all-namespaces
 1264  kubectl describe pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4
 1265  curl -s http://127.0.0.1:8080/auction/healthChec
 1266  curl -s http://127.0.0.1:8080/auction/healthCheck
 1267  curl -vvv http://127.0.0.1:8080/auction/healthCheck
 1268  kubectl get events --all-namespaces
 1269  kubectl get pods --all-namespaces
 1270  kubectl get pod tomcat-65d56c9bd4-rn2l4 -o yaml
 1271  kubectl get pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4 -o yaml
 1272  kubectl logs -n auctionw1i1 tomcat-65d56c9bd4-rn2l4 tomcat
 1273  kubectl get pods --all-namespaces
 1274  kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces
 1275  kubectl kill pod auctionbidservice-c69f955d8-wfmw7
 1276  kubectl delete pod auctionbidservice-c69f955d8-wfmw7
 1277  kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces
 1278  kubectl get pods --all-namespaces
 1279  kubectl delete pod unwanted --now auctionbidservice-c69f955d8-zwk4k
 1280  kubectl delete pod auctionbidservice-c69f955d8-zwk4k --now
 1281  kubectl delete pod -A auctionbidservice-c69f955d8-zwk4k --now
 1282  kubectl delete pod auctionbidservice-c69f955d8-zwk4k --now
 1283  kubectl get pods --all-namespaces
 1284  kubectl delete -n default auctionbidservice-c69f955d8-k7rqh
 1285  kubectl delete auctionbidservice-c69f955d8-k7rqh
 1286  kubectl get pods --all-namespaces
 1287  kubectl delete pod auctionbidservice-c69f955d8-k7rqh
 1288  kubectl get pods --all-namespaces
 1289  kubectl get deployments
 1290  kubectl get all -o auctionbidservice
 1291  kubectl get events
 1292  kubctl get rc
 1293  kubectl get rc
 1294  kubectl get -A rc
 1295  kubectl get rc --all-namespaces
 1296  kubectl get deployment
 1297  kubectl delete deployment auctionbidservice
 1298  kubectl get pods --all-namespaces
 1299  kubectl get events
 1300  ls
 1301  cd
 1302  cd weathervane
 1303  cd configFiles/kubernetes/
 1304  ll
 1305  cat auctionbidservice.yaml
 1306  who
 1307  kubectl get pvc --all-namespaces
 1308  git status
 1309  z
 1310  kubectl get pods --all-namespaces
 1311  kubectl get events
 1312  kubectl get events -A
 1313  kubectl get pods --all-namespaces
 1314  kubectl get deployments --all-namespaces
 1315  kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces
 1316  kubectl get pods --all-namespaces
 1317  kubectl logs kubectl cassandra-0
 1318  kubectl logs cassandra-0
 1319  kubectl logs -n auctionw1i1 cassandra-0
 1320  kubectl get pods --all-namespaces
 1321  cd
 1322  cd weathervane
 1323  vi y
 1324  shell
 1325  kubectl get pods --all-namespaces
 1326  fg
 1327  man tail
 1328  kubectl get pods --all-namespaces | tail +1
 1329  kubectl get pods --all-namespaces | tail +2
 1330  kubectl get pods --all-namespaces | tail +0
 1331  kubectl get pods --all-namespaces | tail +1
 1332  kubectl get pods --all-namespaces | tail +2
 1333  lines=$(kubectl get pods --all-namespaces | tail +2)
 1334  for line in $lines; do echo "line $line"; done
 1335  history
 1336  who
 1337  history > history_220829
 1338  vi history_220829
 1339  cd weathervane
 1340  ll
 1341  cat z
 1342  ll
 1343  ll /root
 1344  sudo bash
 1345  jobs
 1346  cd weathervane
 1347  ll
 1348  cat weathervane.config.k8s.quickstart
 1349  cd weathervane
 1350  cat z
 1351  cd weathervane
 1352  z
 1353  . z
 1354  fg
 1355  kubectl get node -A
 1356  sudo snap install multipass
 1357  ll
 1358  cat pv01.yaml
 1359  cat pv02.yaml
 1360  cat pv03.yaml
 1361  ll
 1362  cat create-persistent-vol.yaml
 1363  cat pvc2.yaml
 1364  cat pvc3.yaml
 1365  multipass launch -c 4 -d 50G -m 8G -n node1
 1366  multipass shell node1
 1367  ls
 1368  cat *.q*
 1369  cat pv01.yaml
 1370  cat z
 1371  ls
 1372  vi runWeathervane.pl
 1373  which docker
 1374  docker --version
 1375  cat z
 1376  vi runWeathervane.pl
 1377  jobs
 1378  fg
 1379  ll
 1380  cat debugWeathervane.pl
 1381  jobs
 1382  fg
 1383  jobs
 1384  fg
 1385  cat z
 1386  kubectl get sc --all-namespaces
 1387  kubectl get pv --all-namespaces
 1388  kubectl get pvc --all-namespaces
 1389  vi z
 1390  . z
 1391  vi z
 1392  fg
 1393  kubctl get pv -A
 1394  kubectl get pv -A
 1395  kubectl get sc -A
 1396  . z
 1397  cd weathervane
 1398  vi t
 1399  vi z
 1400  vi *.q*
 1401  vi z
 1402  \
 1403  vi z
 1404  history
mfm@mm74:~$ who
mfm      pts/0        2022-08-31 18:43 (70.112.73.191)
mfm@mm74:~$ ls
auctionbidservice.yaml  history_220819  history_220825  history_220829  runc.amd64  weathervane
history_2208151459      history_220824  history_220826  p.yaml          snap        weathervane_backup
mfm@mm74:~$ kubectl get sc --all-namespaces
NAME            PROVISIONER                    RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
local-storage   kubernetes.io/no-provisioner   Retain          Immediate           false                  6d20h
mfm@mm74:~$ kubectl get pv --all-namespaces
NAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                                    STORAGECLASS    REASON   AGE
weathervane-pv1   40Gi       RWO            Retain           Released   default/weathervane-test-claim           local-storage            24h
weathervane-pv2   40Gi       RWO            Retain           Bound      auctionw1i1/postgresql-postgresql-0      local-storage            24h
weathervane-pv3   40Gi       RWO            Retain           Bound      auctionw1i1/cassandra-data-cassandra-0   local-storage            24h
mfm@mm74:~$ alias sc="kubectl get sc -A"
mfm@mm74:~$ alias pv="kubectl get pv -A"
mfm@mm74:~$ alias pvc="kubectl get pvc -A"
mfm@mm74:~$ sc
NAME            PROVISIONER                    RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
local-storage   kubernetes.io/no-provisioner   Retain          Immediate           false                  6d20h
mfm@mm74:~$ pv
NAME              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                                    STORAGECLASS    REASON   AGE
weathervane-pv1   40Gi       RWO            Retain           Released   default/weathervane-test-claim           local-storage            24h
weathervane-pv2   40Gi       RWO            Retain           Bound      auctionw1i1/postgresql-postgresql-0      local-storage            24h
weathervane-pv3   40Gi       RWO            Retain           Bound      auctionw1i1/cassandra-data-cassandra-0   local-storage            24h
mfm@mm74:~$ pvc
NAMESPACE     NAME                         STATUS   VOLUME            CAPACITY   ACCESS MODES   STORAGECLASS    AGE
auctionw1i1   cassandra-data-cassandra-0   Bound    weathervane-pv3   40Gi       RWO            local-storage   24h
auctionw1i1   postgresql-postgresql-0      Bound    weathervane-pv2   40Gi       RWO            local-storage   24h
mfm@mm74:~$ ls
auctionbidservice.yaml  history_220819  history_220825  history_220829  runc.amd64  weathervane
history_2208151459      history_220824  history_220826  p.yaml          snap        weathervane_backup
mfm@mm74:~$ cd weathervane
mfm@mm74:/home/mfm/weathervane$ ls
BRANCHING.md        auctionAppServerWarmer      dbLoader             outDir     pvcs.log           version.txt
Branches.md         auctionBidService           debugWeathervane.pl  output     pvs.log            weathervane.config.k8s.micro
CODE-OF-CONDUCT.md  auctionWeb                  dist                 pv01.yaml  runHarness         weathervane.config.k8s.quickstart
CONTRIBUTING.md     build.gradle                doc                  pv02.yaml  runWeathervane.pl  weathervane.config.k8s.small2
ISSUES.md           buildDockerImages.log       dockerImages         pv03.yaml  runmany.sh         weathervane.pl
LICENSE.txt         buildDockerImages.pl        gradle               pv04.yaml  settings.gradle    weathervaneResults.csv
Notice.txt          configFiles                 gradle.properties    pv05.yaml  tee                workloadConfiguration
README.md           create-persistent-vol.yaml  gradlew              pv06.yaml  test-pvc.yaml      workloadDriver
Som_logs            create-storage-class.yaml   gradlew.bat          pvc2.yaml  testing            wv-pvc.yaml
auctionApp          create-storage-class2.yaml  my.yaml              pvc3.yaml  tmpDir             z
mfm@mm74:/home/mfm/weathervane$ cat pv01.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: weathervane-pv1
spec:
  capacity:
    storage: 40Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /k8s/weathervane/vol/v01
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - mm74
mfm@mm74:/home/mfm/weathervane$ cat pv02.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: weathervane-pv2
spec:
  capacity:
    storage: 40Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /k8s/weathervane/vol/v02
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - mm74
mfm@mm74:/home/mfm/weathervane$ cat pv03.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: weathervane-pv3
spec:
  capacity:
    storage: 40Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /k8s/weathervane/vol/v03
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - mm74
mfm@mm74:/home/mfm/weathervane$ ls
BRANCHING.md        auctionAppServerWarmer      dbLoader             outDir     pvcs.log           version.txt
Branches.md         auctionBidService           debugWeathervane.pl  output     pvs.log            weathervane.config.k8s.micro
CODE-OF-CONDUCT.md  auctionWeb                  dist                 pv01.yaml  runHarness         weathervane.config.k8s.quickstart
CONTRIBUTING.md     build.gradle                doc                  pv02.yaml  runWeathervane.pl  weathervane.config.k8s.small2
ISSUES.md           buildDockerImages.log       dockerImages         pv03.yaml  runmany.sh         weathervane.pl
LICENSE.txt         buildDockerImages.pl        gradle               pv04.yaml  settings.gradle    weathervaneResults.csv
Notice.txt          configFiles                 gradle.properties    pv05.yaml  tee                workloadConfiguration
README.md           create-persistent-vol.yaml  gradlew              pv06.yaml  test-pvc.yaml      workloadDriver
Som_logs            create-storage-class.yaml   gradlew.bat          pvc2.yaml  testing            wv-pvc.yaml
auctionApp          create-storage-class2.yaml  my.yaml              pvc3.yaml  tmpDir             z
mfm@mm74:/home/mfm/weathervane$ cat create-persistent-vol.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: weathervane-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /k8s/weathervane/vol/v01
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - mm74
mfm@mm74:/home/mfm/weathervane$ ll /k8s
total 12
drwxrwxrwx  3 root root 4096 Aug 17 19:47 ./
drwxr-xr-x 23 root root 4096 Aug 17 19:47 ../
drwxrwxrwx  3 root root 4096 Aug 17 19:47 weathervane/
mfm@mm74:/home/mfm/weathervane$ ll /k8s/weathervane/
total 12
drwxrwxrwx 3 root root 4096 Aug 17 19:47 ./
drwxrwxrwx 3 root root 4096 Aug 17 19:47 ../
drwxrwxrwx 7 root root 4096 Aug 18 21:18 vol/
mfm@mm74:/home/mfm/weathervane$ ll /k8s/weathervane/vol/
total 28
drwxrwxrwx 7 root root 4096 Aug 18 21:18 ./
drwxrwxrwx 3 root root 4096 Aug 17 19:47 ../
-rw-rw-r-- 1 mfm  mfm     0 Aug 18 19:32 test.tmp
drwxrwxr-x 6  998  996 4096 Aug 25 18:55 v01/
drwxrwxr-x 6  998  996 4096 Aug 25 18:55 v02/
drwxrwxr-x 4  998  996 4096 Aug 24 19:19 v03/
drwxrwxr-x 2 mfm  mfm  4096 Aug 18 21:18 v04/
drwxrwxr-x 2 mfm  mfm  4096 Aug 18 21:18 v05/
mfm@mm74:/home/mfm/weathervane$ ls
BRANCHING.md        auctionAppServerWarmer      dbLoader             outDir     pvcs.log           version.txt
Branches.md         auctionBidService           debugWeathervane.pl  output     pvs.log            weathervane.config.k8s.micro
CODE-OF-CONDUCT.md  auctionWeb                  dist                 pv01.yaml  runHarness         weathervane.config.k8s.quickstart
CONTRIBUTING.md     build.gradle                doc                  pv02.yaml  runWeathervane.pl  weathervane.config.k8s.small2
ISSUES.md           buildDockerImages.log       dockerImages         pv03.yaml  runmany.sh         weathervane.pl
LICENSE.txt         buildDockerImages.pl        gradle               pv04.yaml  settings.gradle    weathervaneResults.csv
Notice.txt          configFiles                 gradle.properties    pv05.yaml  tee                workloadConfiguration
README.md           create-persistent-vol.yaml  gradlew              pv06.yaml  test-pvc.yaml      workloadDriver
Som_logs            create-storage-class.yaml   gradlew.bat          pvc2.yaml  testing            wv-pvc.yaml
auctionApp          create-storage-class2.yaml  my.yaml              pvc3.yaml  tmpDir             z
mfm@mm74:/home/mfm/weathervane$ cat create-storage-class.yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: Immediate
mountOptions:
- debug
mfm@mm74:/home/mfm/weathervane$ cat debugWeathervane.pl
#!/usr/bin/perl
# Copyright 2017-2019 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
#
# Created by: Hal Rosenberg
#
# This is the entrypoint to Weathervane
#
package Weathervane;
use strict;
use Getopt::Long;
no if $] >= 5.017011, warnings => 'experimental::smartmatch';

my $accept = '';
my $configFile = 'weathervane.config';
my $version = '2.0.0';
my $outputDir = 'output';
my $tmpDir = '';
my $backgroundScript = '';
my $mapSsh = '';
my $skipPvTest = '';
my $fixedConfigsFile = "";
my $scriptPeriodSec = 60;
my $help = '';
my $startStatsScript = '';
my $stopStatsScript = '';

# Turn on auto flushing of output
BEGIN { $| = 1 }

if ((-e "./version.txt") && (-f "./version.txt")) {
  $version = `cat ./version.txt`;
  chomp($version);
}
my $defaultVersion = $version;

GetOptions(     'accept!' => \$accept,
                        'configFile=s' => \$configFile,
                        'outputDir=s' => \$outputDir,
                        'version=s' => \$version,
                        'tmpDir=s' => \$tmpDir,
                        'script=s' => \$backgroundScript,
                        'fixedConfigsFile=s' => \$fixedConfigsFile,
                        'startStatsScript=s' => \$startStatsScript,
                        'stopStatsScript=s' => \$stopStatsScript,
                        'scriptPeriod=i' => \$scriptPeriodSec,
                        'mapSsh!' => \$mapSsh,
                        'skipPvTest!' => \$skipPvTest,
                        'help!' => \$help,
                );

my $wvCommandLineArgs = join(" ", @ARGV);

sub usage {
    print "Usage: ./runWeathervane.pl [options] [-- parameters]\n";
        print "\nThis script is used to run the Weathervane benchmark using the configuration specified in a configuration file.\n";
        print "It takes the following options:\n";
        print "--configFile: This specifies the configuration file used to control the Weathervane run.\n";
        print "              If this parameter is not a fully-qualified file name starting with a \/ then\n";
        print "              the location of the file is assumed to be relative to the directory in which\n";
        print "              this script was invoked.\n";
        print "              For a description of the Weathervane configuration file, please see the \n";
        print "              Weathervane User's Guide\n";
        print "              default value: weathervane.config\n";
        print "--version:    The version of Weathervane to use.  This will override the default version\n";
        print "              number to use for the Weathervane container images.\n";
        print "              default value: $defaultVersion\n";
        print "--outputDir:  The directory in which to store the output from the Weathervane run.  You should\n";
        print "              use the same directory for all runs. Output is only placed in this directory\n";
        print "              at the end of a run.  The directory is created if it does not exist.\n";
        print "              If this parameter is not a fully-qualified file name starting with a \/ then\n";
        print "              the location of the file is assumed to be relative to the directory in which\n";
        print "              this script was invoked.\n";
        print "              default value: output\n";
        print "--tmpDir:     The directory in which to store temporary output created during the run.\n";
        print "              This information can be helpful when troubleshooting runs which do not complete\n";
        print "              properly.  The directory is created if it does not exist.\n";
        print "              If this parameter is not a fully-qualified file name starting with a \/ then\n";
        print "              the location of the file is assumed to be relative to the directory in which\n";
        print "              this script was invoked.\n";
        print "              default value: None.  If no value is specified the temporary files are stored\n";
        print "                             inside the Weathervane container.\n";
        print "--script:     The path to a script that should be run every scriptPeriod seconds.\n";
        print "              The script may be used to refresh the credentials in the kubeconfig file\n";
        print "              or to trigger external stats collection.\n";
        print "              If this parameter is not a fully-qualified file name starting with a \/ then\n";
        print "              the location of the file is assumed to be relative to the directory in which\n";
        print "              this script was invoked.\n";
        print "              default value: None.\n";
        print "--scriptPeriod: The frequency at which the script should be run in seconds.\n";
        print "              default value: 60\n";
        print "--mapSsh:     Causes the user's \$HOME/.ssh directory to be mapped into the run harness container.\n";
        print "              This is only needed when collecting esxtop data, which requires passwordless ssh.\n";
        print "              default value: False\n";
        print "--accept:     Accepts the terms of the Weathervane license.  Useful when running this script\n";
        print "              from another script.  Only needs to be specified on the first run in a given directory.\n";
        print "              default value: None.  If no value is specified the user is prompted to accept the\n";
        print "                             license terms.\n";
        print "--skipPvTest: Causes the scipt to skip testing whether Weathervane can dynamically allocate \n";
        print "              persistant volumes in the storage classes defined in the configuration file.\n";
        print "              default value: False";
        print "--help:       Displays this text.\n";
        print "\n";
        print "To pass command-line parameters to the Weathervane run harness, enter them following two dashes\n";
        print "after the options.  For example, to stop the services from a previous run you would use:\n";
        print "./runWeathervane.pl --configFile=weathervane.config -- --stop\n";
}

sub parseConfigFile {
        my ($configFileName, $dockerNamespace) = @_;

        # Read in the config file
        open( my $configFile, "<$configFileName" ) or die "Couldn't open configuration file $configFileName: $!\n";

        my @k8sConfigFiles;
        my %clusterNameToKubeconfig;
        my $topLevelAppInstanceCluster = "";
        my %topLevelStorageClassNames;
        # Parsing the config file manually to avoid requiring the JSON package
        while (<$configFile>) {
                if ($_ =~ /^\s*#/) {
                                next;
                } elsif ($_ =~ /^\s*"kubernetesClusters"\s*\:\s*\[/) {
                        # Fill out a hash with clustername -> [kubeconfig, context])
                        while (<$configFile>) {
                                if ($_ =~ /^\s*#/) {
                                        next;
                                } elsif ($_ =~ /^\s*{/) {
                                        my $name = "";
                                        my $kubeconfigFileName = "~/.kube/config";
                                        my $kubeconfigContext = "";
                                        while (<$configFile>) {
                                                if ($_ =~ /^\s*#/) {
                                                        next;
                                                } elsif ($_ =~ /^\s*"kubeconfigFile"\s*\:\s*"(.*)"\s*,/) {
                                                        $kubeconfigFileName = $1;
                                                        if ((! -e $kubeconfigFileName) || (! -f $kubeconfigFileName)) {
                                                                print "The kubeconfigFile $kubeconfigFileName must exist and be a regular file.\n";
                                                                usage();
                                                                exit 1;

                                                        }
                                                        if (!($kubeconfigFileName ~~ @k8sConfigFiles)) {
                                                                push(@k8sConfigFiles, $kubeconfigFileName);
                                                        }
                                                } elsif ($_ =~ /^\s*"kubeconfigContext"\s*\:\s*"(.*)"\s*,/) {
                                                        $kubeconfigContext = $1;
                                                } elsif ($_ =~ /^\s*"name"\s*\:\s*"(.*)"\s*,/) {
                                                        $name = $1;
                                                } elsif ($_ =~ /^\s*\}/) {
                                                        last;
                                                }
                                        }
                                        $clusterNameToKubeconfig{$name} = [$kubeconfigFileName, $kubeconfigContext];

                                } elsif ($_ =~ /^\s*\]/) {
                                        last;
                                }
                        }
                } elsif ($_ =~ /^\s*"workloads"\s*\:\s*\[/) {
                        # Don't parse inside workloads
                        my $numOpenBrackets = 1;
                        while (<$configFile>) {
                                if ($_ =~ /^\s*#/) {
                                        next;
                                } elsif ($_ =~ /\[/) {
                                        $numOpenBrackets++;
                                } elsif ($_ =~ /\]/) {
                                        $numOpenBrackets--;
                                        if ($numOpenBrackets == 0) {
                                                last;
                                        }
                                }
                        }
                } elsif ($_ =~ /^\s*"appInstances"\s*\:\s*\[/) {
                        # Don't parse inside appInstances
                        my $numOpenBrackets = 1;
                        while (<$configFile>) {
                                if ($_ =~ /^\s*#/) {
                                        next;
                                } elsif ($_ =~ /\[/) {
                                        $numOpenBrackets++;
                                } elsif ($_ =~ /\]/) {
                                        $numOpenBrackets--;
                                        if ($numOpenBrackets == 0) {
                                                last;
                                        }
                                }
                        }
                } elsif ($_ =~ /StorageClass"\s*\:\s*"(.*)"\s*,/) {
                        $topLevelStorageClassNames{$1} = 1;
                } elsif ($_ =~ /appInstanceCluster"\s*\:\s*"(.*)"\s*,/) {
                        $topLevelAppInstanceCluster = $1;
                } elsif (!$dockerNamespace && ($_ =~ /^\s*"dockerNamespace"\s*\:\s*"(.*)"\s*,/)) {
                        $dockerNamespace = $1;
                } elsif ($_ =~ /useLoadBalancer/) {
                        print "The useLoadBalancer parameter has been replaced with the appIngressMethod parameter. " .
                                "You must update your configuration file.\n" .
                                "Please refer to the Weathervane User's Guide for information on setting the appIngressMethod parameter.\n";
                        exit(1);
                }
        }
        close $configFile;

        if (!$dockerNamespace) {
                print "You must specify the dockerNamespace parameter either in configuration file $configFileName or on the command-line.\n";
                usage();
                exit 1;
        }

        my %clusterToStorageClassNames;
        if ($topLevelAppInstanceCluster) {
                $clusterToStorageClassNames{$topLevelAppInstanceCluster} = \%topLevelStorageClassNames;
        }

        my @return = (\@k8sConfigFiles, $dockerNamespace, \%clusterNameToKubeconfig, \%clusterToStorageClassNames);

        return \@return;
}

sub checkStorageClasses {
        my ($clusterNameToKubeconfigRef, $clusterToStorageClassNamesRef) = @_;

        my $pvcYamlString = <<"END";
{
  \\\"kind\\\": \\\"PersistentVolumeClaim\\\",
  \\\"apiVersion\\\": \\\"v1\\\",
  \\\"metadata\\\": {
    \\\"name\\\": \\\"weathervane-test-claim\\\",
    \\\"annotations\\\": {
        \\\"volume.beta.kubernetes.io/storage-class\\\": \\\"storageClassNameHere\\\"
    }
  },
  \\\"spec\\\": {
    \\\"accessModes\\\": [
      \\\"ReadWriteOnce\\\"
    ],
    \\\"resources\\\": {
      \\\"requests\\\": {
        \\\"storage\\\": \\\"1Mi\\\"
      }
    }
  }
}
END

        foreach my $clusterName (keys %$clusterToStorageClassNamesRef) {
                print "clusterName: $clusterName \n";
                my $kubeconfigFileName = $clusterNameToKubeconfigRef->{$clusterName}->[0];
                print "kubeconfigFileName $kubeconfigFileName \n";
                my $kubeconfigContext = $clusterNameToKubeconfigRef->{$clusterName}->[1];
                print "kubeconfigContext $kubeconfigContext\n";
                foreach my $storageClassName (keys %{$clusterToStorageClassNamesRef->{$clusterName}}) {
                        # Delete any old PVC with name weathervane-test-claim
                        print "cmd kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext delete pvc weathervane-test-claim 2>&1\n";
                        my $out = `kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext delete pvc weathervane-test-claim 2>&1`;
                        print "out: $out\n";
                        # Create a PVC
                        my $pvcYamlStringCopy = $pvcYamlString;
                        $pvcYamlStringCopy =~ s/storageClassNameHere/$storageClassName/;
                        print 'cmd `echo "$pvcYamlStringCopy" | kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext apply -f -`\n';
                        $out = `echo "$pvcYamlStringCopy" | kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext apply -f -`;
                        print "out: $out\n";

                        # Check 5 times for the status to equal Bound and exit if not sucessful
                        my $retries = 5;
                        my $status;
                        do {
                                print "kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext get pvc weathervane-test-claim -o=jsonpath='{.status.phase}'\n";
                                $status = `kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext get pvc weathervane-test-claim -o=jsonpath='{.status.phase}'`;
                                chomp($status);
                                $retries--;
                                if ($status ne "Bound") {
                                        if ($retries == 0) {
                                                $out = `kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext delete pvc weathervane-test-claim 2>&1`;
                                                die "Weathervane is unable to create a persistant volume using storage class $storageClassName in kubernetesCluster $clusterName.\n" .
                                            "Check the configuration of your cluster to ensure that the storage class exists and can provision persistent volumes.\n";
                                        }
                                        sleep 5;
                                }
                        } while (($status ne "Bound") && ($retries > 0));

                        # Delete the PVC
                        $out = `kubectl --kubeconfig=$kubeconfigFileName --context=$kubeconfigContext delete pvc weathervane-test-claim 2>&1`;
                }
        }
}
sub parseKubeconfigFile {
        my ($configFileName) = @_;

        # Read in the config file
        open( CONFIGFILE, "<$configFileName" ) or die "Couldn't open configuration file $configFileName: $!\n";
        my @files;
        while (<CONFIGFILE>) {
                if ($_ =~ /^\s*[a-zA-Z0-9\-_]+:\s*(\/.*)$/) {
                        push @files, $1;
                }
        }
        close CONFIGFILE;

        return \@files;
}

sub dockerExists {
        my ( $name ) = @_;
        my $out = `docker ps -a`;
        my @lines = split /\n/, $out;
        my $found = 0;
        foreach my $line (@lines) {
                if ($line =~ /\s+$name\s*$/) {
                        $found = 1;
                        last;
                }
        }
        return $found;
}

sub runPeriodicScript {
        `$backgroundScript`;
        my $pid = fork();
        if (!defined $pid ) {
                die("Couldn't fork a process to run background script: $!\n");
        } elsif ( $pid == 0 ) {
                while (1) {
                        `$backgroundScript`;
                        sleep($scriptPeriodSec);
                }
                exit;
        }
        return $pid;
}

# Force acceptance of the license if not using the accept parameter
sub forceLicenseAccept {
        open( my $fileout, "./Notice.txt" ) or die "Can't open file ./Notice.txt: $!\n";
        while ( my $inline = <$fileout> ) {
                print $inline;
        }

        print "Do you accept these terms and conditions (yes/no)? ";
        my $answer = <STDIN>;
        chomp($answer);
        $answer = lc($answer);
        while ( ( $answer ne "yes" ) && ( $answer ne "no" ) ) {
                print "Please answer yes or no: ";
                $answer = <STDIN>;
                chomp($answer);
                $answer = lc($answer);
        }
        if ( $answer eq "yes" ) {
                open( my $file, ">./.accept-weathervane" ) or die "Can't create file ./.accept-weathervane: $!\n";
                close $file;
        }
        else {
                exit -1;
        }

}

if ($help) {
        usage();
        exit 0;
}

unless ( -e "./.accept-weathervane" ) {
        if ($accept) {
                open( my $file, ">./.accept-weathervane" ) or die "Can't create file ./.accept-weathervane: $!\n";
                close $file;
        }
        else {
                forceLicenseAccept();
        }
}

if (!(-e $configFile)) {
        print "You must specify a valid configuration file using the configFile parameter.  The file $configFile does not exist.\n";
        usage();
        exit 1;
}
if (!(-f $configFile)) {
        print "The Weathervane configuration file $configFile must not be a directory.\n";
        usage();
        exit 1;
}
# If the configFile does not reference a file with an absolute path,
# then make it an absolute path relative to the local dir
my $pwd = `pwd`;
chomp($pwd);
if (!($configFile =~ /\//)) {
        $configFile = "$pwd/$configFile";
}

# If the outputDir does not reference a directory with an absolute path,
# then make it an absolute path relative to the local dir
if (!($outputDir =~ /\//)) {
        $outputDir = "$pwd/$outputDir";
}
if (!(-e $outputDir)) {
        `mkdir -p $outputDir`;
}
if (!(-d $outputDir)) {
        print "The Weathervane output directory $outputDir must be a directory.\n";
        usage();
        exit 1;
}
my $outputMountString = "-v $outputDir:/root/weathervane/output";

# Mounting the tmpDir is optional.
my $tmpMountString = "";
if ($tmpDir) {
        # If the tmpDir does not reference a directory with an absolute path,
        # then make it an absolute path relative to the local dir
        if (!($tmpDir =~ /\//)) {
                $tmpDir = "$pwd/$tmpDir";
        }
        if (!(-e $tmpDir)) {
                `mkdir -p $tmpDir`;
        }
        if (!(-d $tmpDir)) {
                print "The Weathervane tmp directory $tmpDir must be a directory.\n";
                usage();
                exit 1;
        }
        $tmpMountString = "-v $tmpDir:/root/weathervane/tmpLog";
}

if ($backgroundScript) {
        # If the $backgroundScript does not reference a file with an absolute path,
        # then make it an absolute path relative to the local dir
        if (!($backgroundScript =~ /\//)) {
                $backgroundScript = "$pwd/$backgroundScript";
        }
        if (!(-e $backgroundScript)) {
                die "The script $backgroundScript does not exist.\n";
        }
        if (!(-f $backgroundScript)) {
                print "The script $backgroundScript must be a file.\n";
                exit 1;
        }
        if (!(-x $backgroundScript)) {
                print "The script $backgroundScript must be a executable.\n";
                exit 1;
        }
}

if (dockerExists("weathervane")) {
    `docker rm -vf weathervane`;
}

my $resultsFile = "$pwd/weathervaneResults.csv";
if (!(-e $resultsFile)) {
        `touch $resultsFile`;
} elsif (-d $resultsFile) {
        die "The file $resultsFile must be an ordinary file";
}

my $homeDir = $ENV{'HOME'};
my $sshMountString = "";
if ($mapSsh && (-e "$homeDir/.ssh") && (-d "$homeDir/.ssh")) {
    $sshMountString = "-v $homeDir/.ssh:/root/.ssh";
}

my $dockerNamespace;
# Determine whether the dockerNamespace is set in the command-line
# options that are getting passed to the runHarness
if ($wvCommandLineArgs =~ /\-\-dockerNamespace(\=|\s)([^\s]*)(\s|$)/) {
        $dockerNamespace = $2;
}

my $retRef = parseConfigFile($configFile, $dockerNamespace);
my $k8sConfigFilesRef = $retRef->[0];
$dockerNamespace = $retRef->[1];
my $clusterNameToKubeconfigRef = $retRef->[2];
my $clusterToStorageClassNamesRef = $retRef->[3];

if (!$skipPvTest) {
        checkStorageClasses($clusterNameToKubeconfigRef, $clusterToStorageClassNamesRef);
}

my $k8sConfigMountString = "";
foreach my $k8sConfig (@$k8sConfigFilesRef) {
        # If the config file doesn't have an absolute path,
        # then mount it in /root/weathervane
        if ($k8sConfig =~ /^\//) {
                $k8sConfigMountString .= "-v $k8sConfig:$k8sConfig ";
        } else {
                $k8sConfigMountString .= "-v $k8sConfig:/root/weathervane/$k8sConfig ";
        }

        # Also mount any files that are referenced in the kubeconfig file
        my $kubeconfigFilesRef = parseKubeconfigFile($k8sConfig);
        foreach my $file (@$kubeconfigFilesRef) {
                $k8sConfigMountString .= "-v $file:$file ";
        }
}



my $configMountString = "-v $configFile:/root/weathervane/weathervane.config";
my $resultsMountString = "-v $resultsFile:/root/weathervane/weathervaneResults.csv";

my $fixedConfigsMountString = "";
if ($fixedConfigsFile) {
        # If the fixedConfigsFile does not reference a file with an absolute path,
        # then make it an absolute path relative to the local dir
        if (!($fixedConfigsFile =~ /\//)) {
                $fixedConfigsFile = "$pwd/$fixedConfigsFile";
        }
        if (!(-e "$fixedConfigsFile") || !(-f "$fixedConfigsFile")) {
                die "fixedConfigsFile $fixedConfigsFile must exist\n";
        } else {
                $fixedConfigsMountString = "-v $fixedConfigsFile:/root/weathervane/runHarness/fixedConfigs.json";
        }
}

my $startStatsScriptMountString = "";
if ($startStatsScript) {
        # If the $startStatsScript does not reference a file with an absolute path,
        # then make it an absolute path relative to the local dir
        if (!($startStatsScript =~ /\//)) {
                $startStatsScript = "$pwd/$startStatsScript";
        }
        if (!(-e $startStatsScript)) {
                die "The script $startStatsScript does not exist.\n";
        }
        if (!(-f $startStatsScript)) {
                print "The script $startStatsScript must be a file.\n";
                exit 1;
        }
        if (!(-x $startStatsScript)) {
                print "The script $startStatsScript must be a executable.\n";
                exit 1;
        }
        $startStatsScriptMountString = "-v $startStatsScript:$startStatsScript";
        $wvCommandLineArgs .= " --startStatsScript $startStatsScript"
}

my $stopStatsScriptMountString = "";
if ($stopStatsScript) {
        # If the $stopStatsScript does not reference a file with an absolute path,
        # then make it an absolute path relative to the local dir
        if (!($stopStatsScript =~ /\//)) {
                $stopStatsScript = "$pwd/$stopStatsScript";
        }
        if (!(-e $stopStatsScript)) {
                die "The script $stopStatsScript does not exist.\n";
        }
        if (!(-f $stopStatsScript)) {
                print "The script $stopStatsScript must be a file.\n";
                exit 1;
        }
        if (!(-x $stopStatsScript)) {
                print "The script $stopStatsScript must be a executable.\n";
                exit 1;
        }
        $stopStatsScriptMountString = "-v $stopStatsScript:$stopStatsScript";
        $wvCommandLineArgs .= " --stopStatsScript $stopStatsScript"
}

my $tz = `date +%Z`;
chomp($tz);
my $tzEnvString = "-e TZ=$tz";

# Stop an existing run harness container
if (dockerExists("weathervane")) {
    `docker rm -vf weathervane`;
}

my $pid = '';
if ($backgroundScript) {
        print "Running script $backgroundScript every $scriptPeriodSec seconds.\n";
        $pid = runPeriodicScript();
}

# make sure the docker image is up-to-date
print "Starting Weathervane Run-Harness.  Pulling container image may take a few minutes.\n";
`docker pull $dockerNamespace/weathervane-runharness:$version`;

my $cmdString = "docker run --name weathervane --net host $tzEnvString -d -w /root/weathervane "
                . "$configMountString $resultsMountString $k8sConfigMountString $fixedConfigsMountString "
                . "$outputMountString $tmpMountString $sshMountString "
                . "$startStatsScriptMountString $stopStatsScriptMountString "
                . "$dockerNamespace/weathervane-runharness:$version $wvCommandLineArgs";
my $dockerId = `$cmdString`;

my $pipeString = "docker logs --follow weathervane |";
my $pipePid = open my $driverPipe, "$pipeString"
          or die "Can't open docker logs pipe ($pipeString) : $!\n";

my $inline;
while ( $driverPipe->opened() &&  ($inline = <$driverPipe>) ) {
    print $inline;
}

if ($pid) {
        kill 9, $pid;
}

my $exitCode = `docker inspect weathervane --format='{{.State.ExitCode}}'`;
`docker rm weathervane`;
chomp($exitCode);
if ($exitCode != 0) {
        print "Exit code for Run-Harness container is $exitCode.\n";
        exit $exitCode;
}
mfm@mm74:/home/mfm/weathervane$ ls
BRANCHING.md        auctionAppServerWarmer      dbLoader             outDir     pvcs.log           version.txt
Branches.md         auctionBidService           debugWeathervane.pl  output     pvs.log            weathervane.config.k8s.micro
CODE-OF-CONDUCT.md  auctionWeb                  dist                 pv01.yaml  runHarness         weathervane.config.k8s.quickstart
CONTRIBUTING.md     build.gradle                doc                  pv02.yaml  runWeathervane.pl  weathervane.config.k8s.small2
ISSUES.md           buildDockerImages.log       dockerImages         pv03.yaml  runmany.sh         weathervane.pl
LICENSE.txt         buildDockerImages.pl        gradle               pv04.yaml  settings.gradle    weathervaneResults.csv
Notice.txt          configFiles                 gradle.properties    pv05.yaml  tee                workloadConfiguration
README.md           create-persistent-vol.yaml  gradlew              pv06.yaml  test-pvc.yaml      workloadDriver
Som_logs            create-storage-class.yaml   gradlew.bat          pvc2.yaml  testing            wv-pvc.yaml
auctionApp          create-storage-class2.yaml  my.yaml              pvc3.yaml  tmpDir             z
mfm@mm74:/home/mfm/weathervane$ cat my.yaml
{
  "kind": "PersistentVolumeClaim",
  "apiVersion": "v1",
  "metadata": {
    "name": "weathervane-test-claim",
    "annotations": {
        "volume.beta.kubernetes.io/storage-class": "local-storage"
    }
  },
  "spec": {
    "accessModes": [
      "ReadWriteOnce"
    ],
    "resources": {
      "requests": {
        storage: 1Mi
      }
    }
  }
}
mfm@mm74:/home/mfm/weathervane$ cat pvc2.yaml
  kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: weathervane-test-claim-02
    annotations:
        volume.beta.kubernetes.io/storage-class: local-storage
  spec:
    accessModes:
     - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
mfm@mm74:/home/mfm/weathervane$ pvc
NAMESPACE     NAME                         STATUS   VOLUME            CAPACITY   ACCESS MODES   STORAGECLASS    AGE
auctionw1i1   cassandra-data-cassandra-0   Bound    weathervane-pv3   40Gi       RWO            local-storage   24h
auctionw1i1   postgresql-postgresql-0      Bound    weathervane-pv2   40Gi       RWO            local-storage   24h
mfm@mm74:/home/mfm/weathervane$ kubectl get pvc cassandra-data-cassandra-0 -o json
Error from server (NotFound): persistentvolumeclaims "cassandra-data-cassandra-0" not found
mfm@mm74:/home/mfm/weathervane$ kubectl get pvc -n auctionw1i1 cassandra-data-cassandra-0 -o json
{
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
        "annotations": {
            "pv.kubernetes.io/bind-completed": "yes",
            "pv.kubernetes.io/bound-by-controller": "yes"
        },
        "creationTimestamp": "2022-08-30T19:21:38Z",
        "finalizers": [
            "kubernetes.io/pvc-protection"
        ],
        "labels": {
            "app": "auction",
            "impl": "cassandra",
            "tier": "data",
            "type": "nosqlServer"
        },
        "name": "cassandra-data-cassandra-0",
        "namespace": "auctionw1i1",
        "resourceVersion": "2474875",
        "uid": "48e4ea24-91ab-4748-bd39-93cd508817ab"
    },
    "spec": {
        "accessModes": [
            "ReadWriteOnce"
        ],
        "resources": {
            "requests": {
                "storage": "10Gi"
            }
        },
        "storageClassName": "local-storage",
        "volumeMode": "Filesystem",
        "volumeName": "weathervane-pv3"
    },
    "status": {
        "accessModes": [
            "ReadWriteOnce"
        ],
        "capacity": {
            "storage": "40Gi"
        },
        "phase": "Bound"
    }
}
mfm@mm74:/home/mfm/weathervane$
mfm@mm74:/home/mfm/weathervane$ cat weathervane.config.k8s.quickstart
{
  "description" : "micro",
  "configurationSize": "micro",
  "runStrategy" : "fixed",
  "dockerNamespace" : "mikemoranamd",
  "kubernetesClusters" : [
    {
      "name" : "kubernetes",
      "kubeconfigFile" : "/home/mfm/.kube/config",
      "kubeconfigContext" : "kubernetes-admin@kubernetes",
    },
  ],
  "driverCluster" : "kubernetes",
  "appInstanceCluster" : "kubernetes",
  "appIngressMethod" : "clusterip",
  "cassandraDataStorageClass" : "local-storage",
  "postgresqlStorageClass" : "local-storage",
  "nginxCacheStorageClass" : "local-storage",
}
mfm@mm74:/home/mfm/weathervane$ vi runWeathervane.pl
mfm@mm74:/home/mfm/weathervane$ history
  438  kubectl apply -f pv01.yaml
  439  kubectl apply -f pv02.yaml
  440  kubectl apply -f pv03.yaml
  441  kubectl get storage
  442  kubectl get sc
  443  vim test-pvc.yaml
  444  vim pvc2.yaml
  445  cp pvc2.yaml pvc3.yaml
  446  vim pvc3.yaml
  447  kubectl apply -f test-pvc.yaml
  448  kubectl apply -f pvc2.yaml
  449  kubectl apply -f pvc3.yaml
  450  kubectl get pvc
  451  kubectl delete pvc weathervane-test-claim weathervane-test-claim-02 weathervane-test-claim-03
  452  history | grep run
  453  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  454  kubectl get pvs
  455  kubectl get pvc
  456  kubectl get pv
  457  kubectl get sc
  458  kubectl get pv
  459  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  460  ls -alt
  461  ifconfig
  462  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  463  kubectl get pvs
  464  kubectl get pvc
  465  kubectl get pvc weathervane-test-claim -o yaml
  466  kubectl get pvc weathervane-test-claim -o yaml > p.yaml
  467  cd weathervane/
  468  vim wv-pvc.yaml
  469  kubectl apply -f wv-pvc.yaml
  470  kubectl get pvc
  471  kubectl get pv
  472  kubectl get pvc
  473  kubectl apply -f pvc2.yaml
  474  kubectl get pvc
  475  kubectl get nodes
  476  kubectl get pvc
  477  cd weathervane/
  478  kubectl get pvc
  479  kubectl get pv
  480  kubectl get sc
  481  ls /k8s/weathervane/vol/
  482  kubectl get pv
  483  kubectl describe pvc weathervane-test-claim
  484  kubectl get sc
  485  ./runWeathervane.pl --help
  486  kubectl get pvc
  487  kubectl delete pvc weathervane-test-claim
  488  kubectl delete pvc weathervane-test-claim-02
  489  kubectl get pv
  490  kubectl delete pv weathervane-pv1
  491  kubectl delete pv weathervane-pv2
  492  kubectl delete pv weathervane-pv3
  493  kubectl sc
  494  kubectl get sc
  495  vim runWeathervane.pl
  496  kubectl apply -f pv01.yaml
  497  kubectl apply -f pv02.yaml
  498  kubectl apply -f pv03.yaml
  499  kubectl get pv
  500  vim runWeathervane.pl
  501  history | grep run
  502  ./runWeathervane.pl  --configFile=weathervane.config.k8s.quickstart
  503  kubectl get pv
  504  kubectl get pvc
  505  kubectl get pvc --all-namespace
  506  kubectl get pvc --all-namespaces
  507  kubectl get ns
  508  docker
  509  sudo apt install docker.io
  510  docker
  511  sudo apt install podman-docker
  512  dock
  513  podman
  514  podman ps -a
  515  vim runWeathervane.pl
  516  docker
  517  sudo apt remove podman-docker
  518  sudo apt purge podman-docker
  519  podman ps -a
  520  sudo apt install docker.io
  521  sudo apt install containerd.io docker.io
  522  podma
  523  podman
  524  podmannamespave
  525  podmannamespace
  526  podmannamespaces
  527  dockernamespave
  528  dockernamespace
  529  vim runWeathervane.pl
  530  sudo apt install podman-docker
  531  which podman
  532  sudo ln -s /usr/bin/docker /usr/bin/podman
  533  sudo ln -s /usr/bin/podman /usr/bin/docker
  534  ls /usr/bin/docker
  535  docker
  536  docker ps -a
  537  history | grep run
  538  ./runWeathervane.pl  --configFile=weathervane.config.k8s.quickstart
  539  cd weathervane/
  540  ls -lat
  541  ./buildDockerImages.pl --username psonemal
  542  vim buildDockerImages.log
  543  cat buildDockerImages.
  544  cat buildDockerImages.log
  545  docker run --name weathervane-builder --rm -v /home/mfm/weathervane/.gradle:/root/.gradle -v /home/mfm/weathervane:/root/weathervane -w /root/weathervane --entrypoint /root/weathervane/gradlew openjdk:8
  546  hostname
  547  ./buildDockerImages.pl --private --host mm74
  548  cat buildDockerImages.log
  549  cat /etc/containers/registries.conf
  550  ./buildDockerImages.pl --username psonemal
  551  cat buildDockerImages.log
  552  history
  553  ll
  554  history > history_220819
  555  cd weathervane/
  556  ls
  557  ls -lrt
  558  cat buildDockerImages.log
  559  tail ~/.ssh/authorized_keys
  560  cat buildDockerImages.pl
  561  ./buildDockerImages.pl --username mikemoranamd
  562  cat buildDockerImages.log
  563  who
  564  cd weathervane/
  565  cat pv01.yaml
  566  cat pv02.yaml
  567  cat pv03.yaml
  568  cat pv04.yaml
  569  cat pv05.yaml
  570  cat pvc2.yaml
  571  cat pvc3.yaml
  572  cat wv-pvc.yaml
  573  git status
  574  ./runWeathervane.pl --skipPvTest --configFile=weathervane.config.k8s.quickstart
  575  locate Term/ReadKey.pm
  576  sudo apt install plocate
  577  sudo apt install mlocate
  578  locate Term/ReadKey.pm
  579  cpan Term::ReadKey
  580  sudo cpan Term::ReadKey
  581  ./runWeathervane.pl --skipPvTest --configFile=weathervane.config.k8s.quickstart
  582  sudo ./runWeathervane.pl --skipPvTest --configFile=weathervane.config.k8s.quickstart
  583  cd weathervane/
  584  kubectl get pv
  585  kubectl get pvc
  586  ls -lat
  587  vim buildDockerImages.log
  588  docker ps -a
  589  docker iamge ls
  590  docker image ls
  591  cat buildDockerImages.log
  592  docker run --name weathervane-builder
  593  vim buildDockerImages.pl
  594  ./buildDockerImages.pl --username psonemal@amd.com
  595  cat buildDockerImages.log.
  596  ./buildDockerImages.pl --username psonemal
  597  cat buildDockerImages.log.
  598  cat buildDockerImages.log
  599  cat /etc/containers/registries.conf
  600  cat buildDockerImages.log
  601  podman compose
  602  podman-compose up
  603  vim /etc/containers/registries.conf
  604  sudo vim /etc/containers/registries.conf
  605  ./buildDockerImages.pl --username psonemal
  606  kubectl get pv
  607  kubectl get pvc
  608  kubectl get sc
  609  history | grep kubectl
  610  kubectl get pvc
  611  kubectl get pvc --all-namespaces
  612  kubectl get pvc --all-namespace
  613  kubectl get pvc --all-namespaces
  614  kubectl get pvc
  615  kubectl get pvc --all-namespaces
  616  kubectl get pv --all-namespaces
  617  kubectl delete pv weathervane-pv1
  618  kubectl delete pv weathervane-pv2
  619  kubectl delete pv weathervane-pv3
  620  kubectl apply -f pv01.yaml
  621  kubectl apply -f pv02.yaml
  622  kubectl apply -f pv03.yaml
  623  kubectl get pv
  624  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart
  625  ./runWeathervane.pl --help
  626  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/output
  627  vim runWeathervane.pl
  628  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/outDir --tmpDir  /home/mfm/weathervane/tmpDir
  629  ls outDir/
  630  ls tmpDir/
  631  exit
  632  cat /etc/containers/registries.conf
  633  podman ps -a
  634  kubectl get pv
  635  kubectl get pvc
  636  kubectl get pvc --all-namespaces
  637  kubectl get pv --all-namespaces
  638  kubectl get pvc --all-namespaces
  639  cd weathervane/
  640  ls -lat tmpDir/
  641  ls -lat  outDir/
  642  cat outDir/sequence.num
  643  top
  644  docker ps -a
  645  history | grep run
  646  kubectl get sc
  647  kubectl get pv --all-namespaces
  648  kubectl get sc
  649  kubectl get pvc --all-namespaces
  650  exit
  651  kubectl get pv
  652  kubectl get pvc
  653  kubectl get sc
  654  cd weathervane/
  655  vim
  656  ls
  657  cat weathervane.config.k8s.quickstart
  658  uname -a
  659  ll
  660  which zip
  661  which pkzip
  662  cd weathervane/
  663  ls
  664  ls -lrt
  665  cd ..
  666  cp -R weathervane/ weathervane_backup
  667  ll
  668  cd weathervane_backup/
  669  ll
  670  cd ..
  671  du -s *
  672  cd weathervane
  673  ll
  674  history | grep quickstart
  675  history
  676  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/outDir --tmpDir  /home/mfm/weathervane/tmpDir
  677  kubectl get pv
  678  who
  679  curl curl localhost:c4231//SEV_Dashboard
  680  kubectl get pv
  681  cd weathervane/
  682  ll
  683  cat pv01.yaml
  684  kubectl get pvc
  685  kubectl get pv
  686  uptime
  687  ps -a
  688  cd /tmp
  689  ll
  690  cd 220824191813/
  691  ll
  692  ll outDir/
  693  cat outDir/sequence.num
  694  ll tmpDir/
  695  date
  696  uptime
  697  kubectl get pods
  698  kubectl get pods --all-namespaces
  699  uptime
  700  kubectl get pods --all-namespaces
  701  uptime
  702  kubectl get pods --all-namespaces
  703  uptime
  704  kubectl get pods --all-namespaces
  705  uptime
  706  kubectl get pods --all-namespaces
  707  uptime; kubectl get pods --all-namespaces
  708  cd ..
  709  ll
  710  cd 220824201306/
  711  ll
  712  cat z
  713  kubectl get pvc --all-namespaces
  714  cd ..
  715  lw
  716  lq
  717  ls
  718  cd 220824191813
  719  ls
  720  cat ZOUT
  721  while read line; do     echo "line: $line"; done < ($kubectl get pvc --all-namespaces)
  722  while read line; do     echo "line: $line"; done < `$kubectl get pvc --all-namespaces`
  723  for line in `kubectl get pvc --all-namespaces`; do echo "line: $line"; done
  724  jobs
  725  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
  726  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  727  kubectl delete pv weathervane-pv1
  728  kubectl delete pv weathervane-pv2
  729  kubectl delete pv weathervane-pv3
  730  cd ..
  731  ll
  732  cd 220824201306
  733  cat ZOUT
  734  cd
  735  cd weathervane
  736  ls
  737  cat create-storage-class.yaml
  738  cat weathervane.config.k8s.quickstart
  739  uptime; kubectl get pods --all-namespaces
  740  ls
  741  ps -a
  742  vi z
  743  cat z
  744  uptime; kubectl get pods --all-namespaces
  745  kubectl get sc --all-namespaces
  746  vi create-storage-class.yaml
  747  kubectl get sc --all-namespaces
  748  kubectl create -f create-storage-class.yaml
  749  kubectl get sc --all-namespaces
  750  vi create-storage-class.yaml
  751  kubectl delete sc local-storage2
  752  vi create-storage-class.yaml
  753  kubectl get sc --all-namespaces
  754  vi pv0*.yaml
  755  cat z
  756  uptime; kubectl get pods --all-namespaces
  757  who
  758  uptime; kubectl get pods --all-namespaces
  759  df /tmp
  760  uptime; kubectl get pods --all-namespaces
  761  docker logs tomcat-5579768996-jpqbc
  762  ls
  763  ,cat weathervane.config.k8s.quickstart
  764  cat weathervane.config.k8s.quickstart
  765  vi z
  766  uptime; kubectl get pods --all-namespaces
  767  ll /tmp
  768  uptime; kubectl get pods --all-namespaces
  769  cat z
  770  uptime; kubectl get pods --all-namespaces
  771  cd /tmp
  772  ll
  773  cd 220824224449/
  774  cat ZOUT
  775  uptime; kubectl get pods --all-namespaces
  776  who
  777  ls
  778  cd weathervane
  779  ll
  780  history > ~/history_220824
  781  vi ~/history_220824
  782  cat /etc/containers/registries.conf
  783  ls
  784  test
  785  which test
  786  run
  787  vi z
  788  df .
  789  df /tmp
  790  fg
  791  ./z
  792  . z
  793  ll /tmp
  794  ls
  795  cat z
  796  ls Z_DIR/
  797  cat Z_DIR/z
  798  rm Z_DIR/z
  799  rmdir Z_DIR/
  800  fg
  801  ./z
  802  . z
  803  ll /tmp
  804  ll /tmp/220824174547
  805  cat /tmp/220824174547/ZOUTPUT
  806  fg
  807  . z
  808  cd /tmp/220824175727
  809  ll
  810  cat ZOUT
  811  ls
  812  cat weathervane.config.k8s.quickstart
  813  ls
  814  cd outDir/
  815  ll
  816  cd ../tmpDir/
  817  ll
  818  cd
  819  cd weathervane
  820  fg
  821  ll
  822  ll *.yaml
  823  fg
  824  .  z
  825  ll /tmp/220824180359
  826  ll /tmp
  827  fg
  828  ls
  829  git status
  830  git diff runWeathervane.pl
  831  jobs
  832  vi runWeathervane.pl
  833  kubectl get pv
  834  cat pv01.yaml
  835  kubectl get pvc
  836  kubectl get pvc --all-namespaces
  837  kubectl get pv --all-namespaces
  838  vi z
  839  jobs
  840  ll /tmp
  841  . z
  842  ll /tmp/220824182631
  843  vi z
  844  kubectl get pv
  845  kubectl get pvc
  846  kubectl get sc
  847  kubectl get pv --all-namespaces
  848  kubectl get pvc --all-namespaces
  849  kubectl get sc --all-namespaces
  850  jobs
  851  cat create-storage-class.yaml
  852  jobs
  853  fg
  854  . z
  855  cd /tmp/220824184936
  856  ll
  857  cat ZOUT
  858  1fg
  859  cd
  860  cd weathervane
  861  fg
  862  . z
  863  cat /tmp/220824185250/ZOUT
  864  fg
  865  kubectl delete pvc cassandra-data-cassandra-0
  866  kubectl delete pvc cassandra-data-cassandra-0 -ns auctionw1i1
  867  kubectl delete pvc cassandra-data-cassandra-0 -namespace auctionw1i1
  868  kubectl delete pvc cassandra-data-cassandra-0 --namespace auctionw1i1
  869  kubectl get pvc --all-namespaces
  870  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  871  kubectl get pvc --all-namespaces
  872  fg
  873  . z
  874  kubectl get pvc --all-namespaces
  875  kubectl delete pv weathervane-pv1
  876  kubectl get pv --all-namespaces
  877  kubectl apply -f pv01.yaml
  878  kubectl get pv --all-namespaces
  879  kubectl delete pv weathervane-pv2
  880  kubectl delete pv weathervane-pv3
  881  kubectl apply -f pv02.yaml
  882  kubectl apply -f pv03.yaml
  883  kubectl get pv --all-namespaces
  884  g
  885  fg
  886  . z
  887  cd /tmp/220824191813
  888  ll
  889  ll outDir/
  890  ll tmpDir/
  891  kubectl get pv --all-namespaces
  892  kubectl get pvc --all-namespaces
  893  kubectl get sc --all-namespaces
  894  kubectl describe sc local-storage
  895  jobs
  896  fg
  897  which awk
  898  kubectl delete pvc cassandra-data-cassandra-0 --namespace auctionw1i1
  899  kubectl delete pvc postgresql-postgresql-0 --namespace auctionw1i1
  900  kubectl get pvc --all-namespaces
  901  kubectl get pv --all-namespaces
  902  kubectl delete pv weathervane-pv1
  903  kubectl delete pv weathervane-pv2
  904  kubectl delete pv weathervane-pv3
  905  kubectl get sc --all-namespaces
  906  kubectl get pv --all-namespaces
  907  kubectl get pvc --all-namespaces
  908  ls
  909  vi pv01.yaml
  910  vi pv02.yaml
  911  vi pv03.yaml
  912  # changed 10Gi to 20Gi
  913  kubectl apply -f pv01.yaml
  914  kubectl apply -f pv02.yaml
  915  kubectl apply -f pv03.yaml
  916  fg
  917  cd
  918  cd weathervane\
  919  cd weathervane
  920  kubectl get pvc --all-namespaces
  921  kubectl get pv --all-namespaces
  922  ls
  923  vi pv01.yaml pv02.yaml pv03.yaml
  924  cat pv01.yaml pv02.yaml pv03.yaml
  925  . z
  926  jobs
  927  vi z
  928  vi pv0*.yaml
  929  kubectl get sc --all-namespaces
  930  kubectl get pv --all-namespaces
  931  kubectl get pvc --all-namespaces
  932  vi z
  933  cd
  934  cd weathervane
  935  . z
  936  jobs
  937  vi z
  938  . z
  939  vi z
  940  . z
  941  vi z
  942  . z
  943  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
  944  kubectl get pvc --all-namespaces
  945  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  946  kubectl get pvc --all-namespaces
  947  kubectl get sc --all-namespaces
  948  kubectl get pv --all-namespaces
  949  kubectl delete pv weathervane-pv1
  950  kubectl delete pv weathervane-pv2
  951  kubectl get pv --all-namespaces
  952  kubectl delete pv weathervane-pv3
  953  kubectl get pv --all-namespaces
  954  kubectl get pvc --all-namespaces
  955  kubectl get sc --all-namespaces
  956  kubectl get pvc --all-namespaces
  957  kubectl get pv --all-namespaces
  958  vi create-
  959  vi create-storage-class.yaml
  960  cp create-storage-class.yaml create-storage-class2.yaml
  961  vi create-storage-class2.yaml
  962  vi z
  963  ls
  964  cp pv01.yaml pv04.yaml
  965  cp pv02.yaml pv05.yaml
  966  cp pv03.yaml pv06.yaml
  967  vi pv04.yaml pv05.yaml pv06.yaml
  968  cat z
  969  . z
  970  jobs
  971  ls
  972  vi weathervane.config.k8s.quickstart
  973  kubectl get sc --all-namespaces
  974  kubectl get pv --all-namespaces
  975  kubectl delete pv weathervane-pv1-2
  976  kubectl delete pv weathervane-pv2-2
  977  kubectl delete pv weathervane-pv3-2
  978  kubectl get pv --all-namespaces
  979  kubectl get pvc --all-namespaces
  980  cat z
  981  kubectl get sc --all-namespaces
  982  kubectl delete sc local-storage2
  983  kubectl get sc --all-namespaces
  984  kubectl get pv --all-namespaces
  985  kubectl get pvc --all-namespaces
  986  cat z
  987  . z
  988  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
  989  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
  990  kubectl get pvc --all-namespaces
  991  kubectl get pv --all-namespaces
  992  kubectl delete pv weathervane-pv1-2
  993  kubectl delete pv weathervane-pv2-2
  994  kubectl delete pv weathervane-pv3-2
  995  kubectl get pv --all-namespaces
  996  kubectl get sc --all-namespaces
  997  kubectl delete sc local-storage2
  998  kubectl get sc --all-namespaces
  999  kubectl get pv --all-namespaces
 1000  kubectl get pvc --all-namespaces
 1001  jobs
 1002  vi create-storage-class.yaml
 1003  vi runWeathervane.pl
 1004  ll
 1005  . z
 1006  ls
 1007  ca pv01.yaml
 1008  cat pv01.yaml
 1009  cat weathervane.config.k8s.quickstart
 1010  vi weathervane.config.k8s.quickstart
 1011  kubectl get sc --all-namespaces
 1012  cat weathervane.config.k8s.quickstart
 1013  kubectl get sc --all-namespaces
 1014  kubectl get pv --all-namespaces
 1015  kubectl get pvc --all-namespaces
 1016  kubectl delete pvc --namespace auctionw1i1 cassandra-data-cassandra-0
 1017  kubectl delete pvc --namespace auctionw1i1 postgresql-postgresql-0
 1018  kubectl get pvc --all-namespaces
 1019  kubectl get pv --all-namespaces
 1020  jobs
 1021  vi z
 1022  . z
 1023  cat z
 1024  history
 1025  cd weathervane
 1026  ls -alt
 1027  vim z
 1028  kubectl get pv --all-namespaces
 1029  kubectl get pvc --all-namespaces
 1030  kubectl get pods --all-namespaces
 1031  ls tmpDir/
 1032  ls -lat tmpDir/
 1033  ls -lat output/
 1034  ls -lat outDir/
 1035  cat outDir/sequence.num
 1036  podman ps -a
 1037  ls
 1038  kubectl get pvc --all-namespaces
 1039  kubectl get events --all-namespaces
 1040  kubectl get events
 1041  history | grep "run"
 1042  ./runWeathervane.pl --configFile=weathervane.config.k8s.quickstart --outputDir /home/mfm/weathervane/outDir --tmpDir  /home/mfm/weathervane/tmpDir
 1043  vim weathervane.config.k8s.quickstart
 1044  cd outDir/1/
 1045  ls -lat
 1046  vim debug.log
 1047  cd weathervane
 1048  ls -lat
 1049  ls outDir/
 1050  ls -lat tmpDir/
 1051  ls outDir/0/
 1052  ls outDir/0/1
 1053  kubectl get pods --all-namespaces
 1054  podman ps -a
 1055  kubectl describe pod cassandra-0 -ns auctionw1i1
 1056  kubectl describe pod cassandra-0 -n auctionw1i1
 1057  kubectl describe pod postgresql-0  -n auctionw1i1
 1058  top
 1059  !
 1060  kubectl get pods --all-namespaces
 1061  podman ps -a
 1062  top
 1063  kubectl get pods --all-namespaces
 1064  top
 1065  kubectl get pods --all-namespaces
 1066  kubectl describe pod tomcat-85d4b5fc8f-cdcvk -n auctionw1i1
 1067  kubectl describe pod tomcat-85d4b5fc8f-cdcvk -n auctionw1i1 > tomcat.pod.log
 1068  kubectl describe pod tomcat-85d4b5fc8f-cdcvk -n auctionw1i1
 1069  kubectl get pods --all-namespaces
 1070  kubectl describe pod zookeeper-0 -n auctionw1i1
 1071  kubectl describe pod zookeeper-0 -n auctionw1i1 > zookeeper.pod
 1072  kubectl get pods --all-namespaces
 1073  kubectl describe pod rabbitmq-5bbc8874bb-r64k4 -n auctionw1i1
 1074  kubectl describe pod rabbitmq-5bbc8874bb-r64k4 -n auctionw1i1 > rabbitmq.pod
 1075  kubectl get pods --all-namespaces
 1076  kubectl describe pod postgresql-0 -n auctionw1i1
 1077  kubectl describe pod postgresql-0 -n auctionw1i1 > postgresql.pod
 1078  kubectl get pods --all-namespaces
 1079  kubectl describe pod cassandra-0 -n auctionw1i1 > cassandra.pod
 1080  cat cassandra.pod
 1081  kubectl get pvc --all-namespace
 1082  kubectl get pvc --all-namespaces
 1083  kubectl get pvc --all-namespaces > pvcs.log
 1084  kubectl get pv --all-namespaces
 1085  kubectl get pv --all-namespaces > pvs.log
 1086  kubectl describe pv weathervane-pv1
 1087  kubectl describe pv weathervane-pv1 > pv1.describe
 1088  kubectl describe pv weathervane-pv2
 1089  kubectl describe pv weathervane-pv2 > pv2.describe
 1090  kubectl get pvc --all-namespaces
 1091  kubectl describe pvc cassandra-data-cassandra-0
 1092  kubectl describe pvc cassandra-data-cassandra-0 -n auctionw1i1
 1093  kubectl describe pvc cassandra-data-cassandra-0 -n auctionw1i1 > cassandra.data.pvc
 1094  kubectl describe pvc postgresql-postgresql-0 -n auctionw1i1 > postgresql.data.pvc
 1095  cat postgresql.data.pvc
 1096  kubectl get pvc --all-namespaces
 1097  kubectl get pods --all-namespaces
 1098  kubectl describe pod cassandra-0 -n auctionw1i1
 1099  ls
 1100  mkdir Som_logs
 1101  mv *.pod Som_logs/
 1102  mv *.describe Som_logs/
 1103  ls
 1104  mv tomcat.pod.log Som_logs/
 1105  mv cassandra.data.pvc Som_logs/
 1106  mv postgresql.data.pvc Som_logs/
 1107  cd Som_logs/
 1108  ls -lat
 1109  vim tomcat.pod.log
 1110  cat rabbitmq.pod
 1111  ls -lat
 1112  cat rabbitmq.pod
 1113  ls -lat
 1114  vim zookeeper.pod
 1115  vim postgresql.pod
 1116  vim cassandra.pod
 1117  vim tomcat.pod.log
 1118  mv tomcat.pod.log tomcat.pod
 1119  vim tomcat.pod
 1120  history > history_220825
 1121  vi history_220825
 1122  ls
 1123  cd weathervane
 1124  ll
 1125  cd Som_logs
 1126  ll
 1127  cat cassandra.data.pvc
 1128  cat cassandra.pod
 1129  cat postgresql.data.pvc
 1130  cat postgresql.pod
 1131  cat pv1.describe
 1132  cat pv2.describe
 1133  cat rabbitmq.pod
 1134  cat tomcat.pod
 1135  cat zookeeper.pod
 1136  cd ..
 1137  vi z
 1138  kubectl get sc --all-namespaces
 1139  fg
 1140  kubectl get pv --all-namespaces
 1141  kubectl get pvc --all-namespaces
 1142  fg
 1143  cat z
 1144  ls
 1145  cd /tmp
 1146  ls
 1147  cd 220824231635
 1148  ls
 1149  cat ZOUT
 1150  cd
 1151  cd weathervane
 1152  ll
 1153  vi weathervane.config.k8s.quickstart
 1154  vi weathervane.config.k8s.micro
 1155  cd configFiles/
 1156  ll
 1157  cd kubernetes/
 1158  ll
 1159  vi auctionbidservice.yaml
 1160  vi tomcat.yaml
 1161  vi auctionbidservice.yaml
 1162  cd ..
 1163  ls
 1164  vi weathervane.config.k8s.micro
 1165  cd configFiles/
 1166  ls
 1167  cd kubernetes/
 1168  ls
 1169  ll
 1170  vi auctionbidservice.yaml
 1171  vi tomcat.yaml
 1172  1fg
 1173  fg
 1174  ls
 1175  grep 8080 *
 1176  git status
 1177  cd ../..
 1178  ll
 1179  cat z
 1180  . z
 1181  uptime
 1182  kubectl get pods --all-namespaces
 1183  kubectl describe pod -n auctionw1i1 auctiondatamanager-6596b459df-5fvjz,
 1184  kubectl get pods --all-namespaces
 1185  kubectl describe pod -n auctionw1i1 auctiondatamanager-6596b459df-5fvjz
 1186  kubectl get pods --all-namespaces
 1187  kubectl describe pod -n auctionw1i1 cassandra-0
 1188  kubectl get pods --all-namespaces
 1189  kubectl describe pod -n auctionw1i1 postgresql-0
 1190  kubectl get pods --all-namespaces
 1191  kubectl describe pod -n auctionw1i1 rabbitmq-788c88588-jclq4
 1192  kubectl get pods --all-namespaces
 1193  kubectl describe pod -n auctionw1i1 zookeeper-0
 1194  kubectl get pods --all-namespaces
 1195  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1196  kubectl get pods --all-namespaces
 1197  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1198  kubectl get pods --all-namespaces
 1199  kubectl describe pod -n auctionw1i1 cassandra-0
 1200  kubectl describe pod -n auctionw1i1 postgresql-0
 1201  kubectl describe pod -n auctionw1i1 rabbitmq-788c88588-jclq4
 1202  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1203  kubectl describe pod -n auctionw1i1 zookeeper-0
 1204  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1205  cd weathervane/configFiles/kubernetes
 1206  grep 8080 *
 1207  kubectl get pods --all-namespaces
 1208  kubectl describe pod -n auctionw1i1 tomcat-7454895c48-hhqgp
 1209  kubectl get pods --all-namespaces -a
 1210  kubectl get pods --all-namespaces
 1211  kubectl get pods --help
 1212  ls
 1213  kubectl apply -f aucbidservice.yaml
 1214  ls
 1215  kubectl apply -f auctionbidservice.yaml
 1216  kubectl get pods --all-namespaces
 1217  kubectl describe pod auctionbidservice-c69f955d8-wfmw7
 1218  who
 1219  kubectl get pods
 1220  kubectl get pods --all-namespaces --wide
 1221  kubectl get pods --all-namespaces -o wide
 1222  history > history_220826
 1223  vi history_220826
 1224  who
 1225  cd weathervane
 1226  ll
 1227  cd runHarness/
 1228  ls
 1229  ll
 1230  cat Instance.pm
 1231  cd ..
 1232  z
 1233  ls
 1234  . z
 1235  cd configFiles/kubernetes/
 1236  git status
 1237  cp auctionbidservice.yaml ~/.
 1238  git restore auctionbidservice.yaml
 1239  git status
 1240  ls /tmp
 1241  cat /tmp/220826171934/ZOUT
 1242  who
 1243  cd ../..
 1244  vi z
 1245  . z
 1246  man snap
 1247  history
 1248  cd /tmp
 1249  ls
 1250  cd 220826171934
 1251  ll
 1252  kubectl get pods --all-namespaces
 1253  kubectl describe pod -n auctionw1i1 cassandra-0
 1254  kubectl get pods --all-namespaces
 1255  kubectl describe pod -n auctionw1i1 auctiondatamanager-6596b459df-kfbz7
 1256  kubectl get pods --all-namespaces
 1257  kubectl describe pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4
 1258  docker logs tomcat-65d56c9bd4-rn2l4
 1259  docker logs tomcat-65d56c9bd4-rn2l4 -n auctionw1i1
 1260  kubectl get pods --all-namespaces
 1261  kubectl describe pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4
 1262  kubectl get events
 1263  kubectl get pods --all-namespaces
 1264  kubectl describe pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4
 1265  curl -s http://127.0.0.1:8080/auction/healthChec
 1266  curl -s http://127.0.0.1:8080/auction/healthCheck
 1267  curl -vvv http://127.0.0.1:8080/auction/healthCheck
 1268  kubectl get events --all-namespaces
 1269  kubectl get pods --all-namespaces
 1270  kubectl get pod tomcat-65d56c9bd4-rn2l4 -o yaml
 1271  kubectl get pod -n auctionw1i1 tomcat-65d56c9bd4-rn2l4 -o yaml
 1272  kubectl logs -n auctionw1i1 tomcat-65d56c9bd4-rn2l4 tomcat
 1273  kubectl get pods --all-namespaces
 1274  kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces
 1275  kubectl kill pod auctionbidservice-c69f955d8-wfmw7
 1276  kubectl delete pod auctionbidservice-c69f955d8-wfmw7
 1277  kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces
 1278  kubectl get pods --all-namespaces
 1279  kubectl delete pod unwanted --now auctionbidservice-c69f955d8-zwk4k
 1280  kubectl delete pod auctionbidservice-c69f955d8-zwk4k --now
 1281  kubectl delete pod -A auctionbidservice-c69f955d8-zwk4k --now
 1282  kubectl delete pod auctionbidservice-c69f955d8-zwk4k --now
 1283  kubectl get pods --all-namespaces
 1284  kubectl delete -n default auctionbidservice-c69f955d8-k7rqh
 1285  kubectl delete auctionbidservice-c69f955d8-k7rqh
 1286  kubectl get pods --all-namespaces
 1287  kubectl delete pod auctionbidservice-c69f955d8-k7rqh
 1288  kubectl get pods --all-namespaces
 1289  kubectl get deployments
 1290  kubectl get all -o auctionbidservice
 1291  kubectl get events
 1292  kubctl get rc
 1293  kubectl get rc
 1294  kubectl get -A rc
 1295  kubectl get rc --all-namespaces
 1296  kubectl get deployment
 1297  kubectl delete deployment auctionbidservice
 1298  kubectl get pods --all-namespaces
 1299  kubectl get events
 1300  ls
 1301  cd
 1302  cd weathervane
 1303  cd configFiles/kubernetes/
 1304  ll
 1305  cat auctionbidservice.yaml
 1306  who
 1307  kubectl get pvc --all-namespaces
 1308  git status
 1309  z
 1310  kubectl get pods --all-namespaces
 1311  kubectl get events
 1312  kubectl get events -A
 1313  kubectl get pods --all-namespaces
 1314  kubectl get deployments --all-namespaces
 1315  kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces
 1316  kubectl get pods --all-namespaces
 1317  kubectl logs kubectl cassandra-0
 1318  kubectl logs cassandra-0
 1319  kubectl logs -n auctionw1i1 cassandra-0
 1320  kubectl get pods --all-namespaces
 1321  cd
 1322  cd weathervane
 1323  vi y
 1324  shell
 1325  kubectl get pods --all-namespaces
 1326  fg
 1327  man tail
 1328  kubectl get pods --all-namespaces | tail +1
 1329  kubectl get pods --all-namespaces | tail +2
 1330  kubectl get pods --all-namespaces | tail +0
 1331  kubectl get pods --all-namespaces | tail +1
 1332  kubectl get pods --all-namespaces | tail +2
 1333  lines=$(kubectl get pods --all-namespaces | tail +2)
 1334  for line in $lines; do echo "line $line"; done
 1335  history
 1336  who
 1337  history > history_220829
 1338  vi history_220829
 1339  cd weathervane
 1340  ll
 1341  cat z
 1342  ll
 1343  ll /root
 1344  sudo bash
 1345  jobs
 1346  cd weathervane
 1347  ll
 1348  cat weathervane.config.k8s.quickstart
 1349  cd weathervane
 1350  cat z
 1351  cd weathervane
 1352  z
 1353  . z
 1354  fg
 1355  kubectl get node -A
 1356  sudo snap install multipass
 1357  ll
 1358  cat pv01.yaml
 1359  cat pv02.yaml
 1360  cat pv03.yaml
 1361  ll
 1362  cat create-persistent-vol.yaml
 1363  cat pvc2.yaml
 1364  cat pvc3.yaml
 1365  multipass launch -c 4 -d 50G -m 8G -n node1
 1366  multipass shell node1
 1367  ls
 1368  cat *.q*
 1369  cat pv01.yaml
 1370  cat z
 1371  ls
 1372  vi runWeathervane.pl
 1373  which docker
 1374  docker --version
 1375  cat z
 1376  vi runWeathervane.pl
 1377  jobs
 1378  fg
 1379  ll
 1380  cat debugWeathervane.pl
 1381  jobs
 1382  fg
 1383  jobs
 1384  fg
 1385  cat z
 1386  kubectl get sc --all-namespaces
 1387  kubectl get pv --all-namespaces
 1388  kubectl get pvc --all-namespaces
 1389  vi z
 1390  . z
 1391  vi z
 1392  fg
 1393  kubctl get pv -A
 1394  kubectl get pv -A
 1395  kubectl get sc -A
 1396  . z
 1397  cd weathervane
 1398  vi t
 1399  vi z
 1400  vi *.q*
 1401  vi z
 1402  \
 1403  vi z
 1404  history
 1405  who
 1406  ls
 1407  kubectl get sc --all-namespaces
 1408  kubectl get pv --all-namespaces
 1409  alias sc="kubectl get sc -A"
 1410  alias pv="kubectl get pv -A"
 1411  alias pvc="kubectl get pvc -A"
 1412  sc
 1413  pv
 1414  pvc
 1415  ls
 1416  cd weathervane
 1417  ls
 1418  cat pv01.yaml
 1419  cat pv02.yaml
 1420  cat pv03.yaml
 1421  ls
 1422  cat create-persistent-vol.yaml
 1423  ll /k8s
 1424  ll /k8s/weathervane/
 1425  ll /k8s/weathervane/vol/
 1426  ls
 1427  cat create-storage-class.yaml
 1428  cat debugWeathervane.pl
 1429  ls
 1430  cat my.yaml
 1431  cat pvc2.yaml
 1432  pvc
 1433  kubectl get pvc cassandra-data-cassandra-0 -o json
 1434  kubectl get pvc -n auctionw1i1 cassandra-data-cassandra-0 -o json
 1435  cat weathervane.config.k8s.quickstart
 1436  vi runWeathervane.pl
 1437  history
mfm@mm74:/home/mfm/weathervane$ cat /etc/containers/registries.conf
# For more information on this configuration file, see containers-registries.conf(5).
#
# NOTE: RISK OF USING UNQUALIFIED IMAGE NAMES
# We recommend always using fully qualified image names including the registry
# server (full dns name), namespace, image name, and tag
# (e.g., registry.redhat.io/ubi8/ubi:latest). Pulling by digest (i.e.,
# quay.io/repository/name@digest) further eliminates the ambiguity of tags.
# When using short names, there is always an inherent risk that the image being
# pulled could be spoofed. For example, a user wants to pull an image named
# `foobar` from a registry and expects it to come from myregistry.com. If
# myregistry.com is not first in the search list, an attacker could place a
# different `foobar` image at a registry earlier in the search list. The user
# would accidentally pull and run the attacker's image and code rather than the
# intended content. We recommend only adding registries which are completely
# trusted (i.e., registries which don't allow unknown or anonymous users to
# create accounts with arbitrary names). This will prevent an image from being
# spoofed, squatted or otherwise made insecure.  If it is necessary to use one
# of these registries, it should be added at the end of the list.
#
# # An array of host[:port] registries to try when pulling an unqualified image, in order.
# unqualified-search-registries = ["example.com"]
#
# [[registry]]
# # The "prefix" field is used to choose the relevant [[registry]] TOML table;
# # (only) the TOML table with the longest match for the input image name
# # (taking into account namespace/repo/tag/digest separators) is used.
# #
# # The prefix can also be of the form: *.example.com for wildcard subdomain
# # matching.
# #
# # If the prefix field is missing, it defaults to be the same as the "location" field.
# prefix = "example.com/foo"
#
# # If true, unencrypted HTTP as well as TLS connections with untrusted
# # certificates are allowed.
# insecure = false
#
# # If true, pulling images with matching names is forbidden.
# blocked = false
#
# # The physical location of the "prefix"-rooted namespace.
# #
# # By default, this is equal to "prefix" (in which case "prefix" can be omitted
# # and the [[registry]] TOML table can only specify "location").
# #
# # Example: Given
# #   prefix = "example.com/foo"
# #   location = "internal-registry-for-example.net/bar"
# # requests for the image example.com/foo/myimage:latest will actually work with the
# # internal-registry-for-example.net/bar/myimage:latest image.
#
# # The location can be empty iff prefix is in a
# # wildcarded format: "*.example.com". In this case, the input reference will
# # be used as-is without any rewrite.
# location = internal-registry-for-example.com/bar"
#
# # (Possibly-partial) mirrors for the "prefix"-rooted namespace.
# #
# # The mirrors are attempted in the specified order; the first one that can be
# # contacted and contains the image will be used (and if none of the mirrors contains the image,
# # the primary location specified by the "registry.location" field, or using the unmodified
# # user-specified reference, is tried last).
# #
# # Each TOML table in the "mirror" array can contain the following fields, with the same semantics
# # as if specified in the [[registry]] TOML table directly:
# # - location
# # - insecure
# [[registry.mirror]]
# location = "example-mirror-0.local/mirror-for-foo"
# [[registry.mirror]]
# location = "example-mirror-1.local/mirrors/foo"
# insecure = true
# # Given the above, a pull of example.com/foo/image:latest will try:
# # 1. example-mirror-0.local/mirror-for-foo/image:latest
# # 2. example-mirror-1.local/mirrors/foo/image:latest
# # 3. internal-registry-for-example.net/bar/image:latest
# # in order, and use the first one that exists.
unqualified-search-registries=["docker.io"]
mfm@mm74:/home/mfm/weathervane$
