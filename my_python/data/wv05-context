Microsoft Windows [Version 10.0.19044.1889]
(c) Microsoft Corporation. All rights reserved.

C:\Users\mikmoran>ssh ubuntu@139.178.85.77
Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-46-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Sep  6 19:33:15 UTC 2022

  System load:                0.1826171875
  Usage of /:                 7.8% of 218.00GB
  Memory usage:               16%
  Swap usage:                 0%
  Processes:                  630
  Users logged in:            0
  IPv4 address for bond0:     139.178.85.77
  IPv6 address for bond0:     2604:1380:4641:3b00::15
  IPv4 address for mpqemubr0: 10.226.243.1

 * Super-optimized for small spaces - read how we shrank the memory
   footprint of MicroK8s to make it the smallest full K8s around.

   https://ubuntu.com/blog/microk8s-memory-optimisation

9 updates can be applied immediately.
To see these additional updates run: apt list --upgradable


*** System restart required ***
Last login: Thu Sep  1 03:14:28 2022 from 70.112.73.191
Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-46-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Sep  6 19:33:15 UTC 2022

  System load:                0.1826171875
  Usage of /:                 7.8% of 218.00GB
  Memory usage:               16%
  Swap usage:                 0%
  Processes:                  630
  Users logged in:            0
  IPv4 address for bond0:     139.178.85.77
  IPv6 address for bond0:     2604:1380:4641:3b00::15
  IPv4 address for mpqemubr0: 10.226.243.1

 * Super-optimized for small spaces - read how we shrank the memory
   footprint of MicroK8s to make it the smallest full K8s around.

   https://ubuntu.com/blog/microk8s-memory-optimisation

9 updates can be applied immediately.
To see these additional updates run: apt list --upgradable


*** System restart required ***
Last login: Thu Sep  1 03:14:28 2022 from 70.112.73.191
ubuntu@wv05:~$ uname -a
Linux wv05 5.15.0-46-generic #49-Ubuntu SMP Thu Aug 4 18:03:25 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
ubuntu@wv05:~$ cat /etc/apt/sources.list.d/docker.list
deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable
ubuntu@wv05:~$ cat /etc/containerd/config.toml
#disabled_plugins = []
imports = []
oom_score = 0
plugin_dir = ""
required_plugins = []
root = "/var/lib/containerd"
state = "/run/containerd"
temp = ""
version = 2

[cgroup]
  path = ""

[debug]
  address = ""
  format = ""
  gid = 0
  level = ""
  uid = 0

[grpc]
  address = "/run/containerd/containerd.sock"
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216
  tcp_address = ""
  tcp_tls_ca = ""
  tcp_tls_cert = ""
  tcp_tls_key = ""
  uid = 0

[metrics]
  address = ""
  grpc_histogram = false

[plugins]

  [plugins."io.containerd.gc.v1.scheduler"]
    deletion_threshold = 0
    mutation_threshold = 100
    pause_threshold = 0.02
    schedule_delay = "0s"
    startup_delay = "100ms"

  [plugins."io.containerd.grpc.v1.cri"]
    device_ownership_from_security_context = false
    disable_apparmor = false
    disable_cgroup = false
    disable_hugetlb_controller = true
    disable_proc_mount = false
    disable_tcp_service = true
    enable_selinux = false
    enable_tls_streaming = false
    enable_unprivileged_icmp = false
    enable_unprivileged_ports = false
    ignore_image_defined_volumes = false
    max_concurrent_downloads = 3
    max_container_log_line_size = 16384
    netns_mounts_under_state_dir = false
    restrict_oom_score_adj = false
    sandbox_image = "k8s.gcr.io/pause:3.6"
    selinux_category_range = 1024
    stats_collect_period = 10
    stream_idle_timeout = "4h0m0s"
    stream_server_address = "127.0.0.1"
    stream_server_port = "0"
    systemd_cgroup = false
    tolerate_missing_hugetlb_controller = true
    unset_seccomp_profile = ""

    [plugins."io.containerd.grpc.v1.cri".cni]
      bin_dir = "/opt/cni/bin"
      conf_dir = "/etc/cni/net.d"
      conf_template = ""
      ip_pref = ""
      max_conf_num = 1

    [plugins."io.containerd.grpc.v1.cri".containerd]
      default_runtime_name = "runc"
      disable_snapshot_annotations = true
      discard_unpacked_layers = false
      ignore_rdt_not_enabled_errors = false
      no_pivot = false
      snapshotter = "overlayfs"

      [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
        base_runtime_spec = ""
        cni_conf_dir = ""
        cni_max_conf_num = 0
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_path = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime.options]

      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          base_runtime_spec = ""
          cni_conf_dir = ""
          cni_max_conf_num = 0
          container_annotations = []
          pod_annotations = []
          privileged_without_host_devices = false
          runtime_engine = ""
          runtime_path = ""
          runtime_root = ""
          runtime_type = "io.containerd.runc.v2"

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            BinaryName = ""
            CriuImagePath = ""
            CriuPath = ""
            CriuWorkPath = ""
            IoGid = 0
            IoUid = 0
            NoNewKeyring = false
            NoPivotRoot = false
            Root = ""
            ShimCgroup = ""
            SystemdCgroup = true

      [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime]
        base_runtime_spec = ""
        cni_conf_dir = ""
        cni_max_conf_num = 0
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_path = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime.options]

    [plugins."io.containerd.grpc.v1.cri".image_decryption]
      key_model = "node"

    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = ""

      [plugins."io.containerd.grpc.v1.cri".registry.auths]

      [plugins."io.containerd.grpc.v1.cri".registry.configs]

      [plugins."io.containerd.grpc.v1.cri".registry.headers]

      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]

    [plugins."io.containerd.grpc.v1.cri".x509_key_pair_streaming]
      tls_cert_file = ""
      tls_key_file = ""

  [plugins."io.containerd.internal.v1.opt"]
    path = "/opt/containerd"

  [plugins."io.containerd.internal.v1.restart"]
    interval = "10s"

  [plugins."io.containerd.internal.v1.tracing"]
    sampling_ratio = 1.0
    service_name = "containerd"

  [plugins."io.containerd.metadata.v1.bolt"]
    content_sharing_policy = "shared"

  [plugins."io.containerd.monitor.v1.cgroups"]
    no_prometheus = false

  [plugins."io.containerd.runtime.v1.linux"]
    no_shim = false
    runtime = "runc"
    runtime_root = ""
    shim = "containerd-shim"
    shim_debug = false

  [plugins."io.containerd.runtime.v2.task"]
    platforms = ["linux/amd64"]
    sched_core = false

  [plugins."io.containerd.service.v1.diff-service"]
    default = ["walking"]

  [plugins."io.containerd.service.v1.tasks-service"]
    rdt_config_file = ""

  [plugins."io.containerd.snapshotter.v1.aufs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.btrfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.devmapper"]
    async_remove = false
    base_image_size = ""
    discard_blocks = false
    fs_options = ""
    fs_type = ""
    pool_name = ""
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.native"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.overlayfs"]
    root_path = ""
    upperdir_label = false

  [plugins."io.containerd.snapshotter.v1.zfs"]
    root_path = ""

  [plugins."io.containerd.tracing.processor.v1.otlp"]
    endpoint = ""
    insecure = false
    protocol = ""

[proxy_plugins]

[stream_processors]

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar"

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar.gzip"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+gzip+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar+gzip"

[timeouts]
  "io.containerd.timeout.bolt.open" = "0s"
  "io.containerd.timeout.shim.cleanup" = "5s"
  "io.containerd.timeout.shim.load" = "5s"
  "io.containerd.timeout.shim.shutdown" = "3s"
  "io.containerd.timeout.task.state" = "2s"

[ttrpc]
  address = ""
  gid = 0
  uid = 0
ubuntu@wv05:~$ cat /etc/modules-load.d/k8s.conf
br_netfilter
ubuntu@wv05:~$ cat /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
ubuntu@wv05:~$ cat /etc/fstab
UUID=5e2174c7-fb5f-44b6-bba8-3e4dc1b66860       /       ext4    errors=remount-ro       0       1
#UUID=f9c2cb63-7de5-455f-bb53-b3fbece6b28b      none    swap    none    0       0

ubuntu@wv05:~$ cat /etc/hosts
127.0.0.1       localhost       wv05

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ubuntu@wv05:~$ cat /etc/apt/sources.list.d/kubernetes.list
deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
ubuntu@wv05:~$ cat $HOME/.kube/config
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1EZ3lPVEl6TlRFMU9Gb1hEVE15TURneU5qSXpOVEUxT0Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzVPClYvRmVvbnlORGlQS3MwaUpxNkdzTFBGUkJVck84SnNjNGJzSnJINng1Rjk5R1pRMDlpQnNUY2Q4VFE3dHd0dTgKa1pzMGlyQjVIMlE3RGZLV0dQN2RQMWY3YnIrSUxpOVJIdElFdmFIYWQ3bGJXd3c4MEJNRVNQVFRLTTl2bmV0VApwOW41OUYzNnBxTUpsOFI1WEZLaFdsT2FwbEMwMW5FeFNEcm00bHd4ajVuNVBESGtzNWY2UUZNS0xoYld3MnJDClhhV1NYUVZqUDZ0ZTJXMEovOXFUNnoxaldkRW1tOWdqNHRtSDhwYzh2alJzbzV2K2NZQmVUZjRHdUk2ZXZmV1YKZy9zVW11aDAxclhVZ2E5SzVGaFZkamhnbUhseEFrK0xWbS9KSFkyazhta2c1SU1iOSs1T3Z6ZUJaZGU4NGJsMgpaeXlTUG9iK0JLaVkzMTlMeXRFQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZNaHRGa3pjZWZRc0JkYzJzVGt6KzRlcllDclZNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQnF2ajJtazBFelg5SmIwYVRHMApnQ2s5MllPT1h1RHd0L1UyVEd2dWlRY3lsODAxRWs4VmVKY2hCQUswRVFqRjVBQzJiSWw0OGlnN0RrTTluSTZ5CmJ0ZW1HTUM2YXhKNlZTUlZFQnFtWHliNW11TVYrMVZVTEFtdjR3WVNFUlFsYm1nTXpsM2JORDVQZlVoMDRiR20KNVlJRk9vVkxEUTMzRHc3RmdvV1YvQ3JtNG9nd3MyVjJQdkNXdzFCeGN4SkwyanBpT0N6SnlOT01CMlhjUkRpYwpQSFV0bnlvSFlzZFRkbTlkNTJPemIxeDFmUHhsVFMwc0xDbTZoYkRJVFdPRUNrVnFxcVNvZTVrOG5TdStyYnc4CkdLVGhUdWswR3dqMk83UTBaZ1FvQlRVMzlJMGxyTTkxVGtVZExzelZYc3RUSE1tU3d4VEYwTmF0aGhuTXViNjEKRkJzPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://139.178.85.77:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lJVE55dXBlZmdVSzh3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TWpBNE1qa3lNelV4TlRoYUZ3MHlNekE0TWpreU16VXhOVGxhTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXZ1dVQwSjQya1hhejZqVS8KbGNBZzhIMUc0aDhiK0ltTGswL0xpK2p2WTFsTEREalI0YWozT1FYY2hQTnZjeFEyZkQ5b29BUDFnekk4bi8wdApKeUJTY1phNXZRRGRuSnNMclFTS2w0MENEUHcydTVxSktOOTVRUVZ4OVA3WkRjcDlXNUsvcUhBYWordXdqVzhNClJOWll0NjcvKzdRQWFsb29XNzFlVmw5SnJQenE2Z2k0dkE1MS9XUjFyVWdnb3FMNk94R2twY21vSFZXMVV1Sk0KWk05dTVqeU11Y3lrcEE5YjVWd1ZLYkdHc2E1WVlPN045eThKOGJrdjdPWGFzU3hPSDZ3K2dncXZLL1FteCt3QQpiWmxhMEEvOFFFbGpMaFRuQ1lBS3RmK2Vsb3psOWkxeVFpa0gxMFlFa044Sk5mWklBTkREWXRJaEFDT2s4dXpvCk1GQUYwd0lEQVFBQm8xWXdWREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JUSWJSWk0zSG4wTEFYWE5yRTVNL3VIcTJBcQoxVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZ3NaTzZ2VXRZd2xrUkJDbDlibmFuNTA0Wi93QXN5ejhMU1V5CnI1Y3JnQUFIR2FQZGE0dTNXWWtEVStoNG1zTVVNN1lTVFNDQ05UMmlDTWFURjR3L3ZmQ3B4T3VnR0J1QVUwMEYKRitxU3MybzJsUko0V1h5NUZoOVVzQnF3anFMSjl0RFpzSHZ1R08yakpoUnp2dEN5SGxncTJLNnhLWUxjMGQwQwpLQzdkVWtrN2xQMHlZZUErVG9UcU5MRGdjVklsNGZrZXh6OXo4QW1WNFB0a0tlQWFPV1cwa3A0NWx0ckdSYXZjCm15VEtZSnBFWGUybDNqVXhGTXJRSFhqeXRoU0ErL1JnbWdyWDlRblIxT1Yveksrc3BzY1dRdEMzQ2FRNGlKclIKNFdiRi9ESEMyU1NUbUpwcVpwa3BwTjk1RDIxZHN4U09qVkFGVm5SM2RYVEFpR3hjUGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdnV1VDBKNDJrWGF6NmpVL2xjQWc4SDFHNGg4YitJbUxrMC9MaStqdlkxbExERGpSCjRhajNPUVhjaFBOdmN4UTJmRDlvb0FQMWd6SThuLzB0SnlCU2NaYTV2UURkbkpzTHJRU0tsNDBDRFB3MnU1cUoKS045NVFRVng5UDdaRGNwOVc1Sy9xSEFhait1d2pXOE1STlpZdDY3Lys3UUFhbG9vVzcxZVZsOUpyUHpxNmdpNAp2QTUxL1dSMXJVZ2dvcUw2T3hHa3BjbW9IVlcxVXVKTVpNOXU1anlNdWN5a3BBOWI1VndWS2JHR3NhNVlZTzdOCjl5OEo4Ymt2N09YYXNTeE9INncrZ2dxdksvUW14K3dBYlpsYTBBLzhRRWxqTGhUbkNZQUt0ZitlbG96bDlpMXkKUWlrSDEwWUVrTjhKTmZaSUFORERZdEloQUNPazh1em9NRkFGMHdJREFRQUJBb0lCQUM2cEFwSTg2SmM2akpRVAorWHRPM240SUVCZlpoSXVFaWpFeGtreWFYRTlLbG5YaE9TSk9ta1U4Y24ybnhUZzUyMnNZVUNpemJ3Qm1lYnljCk1ybmFRMnZ4YTJtTzJacVpwZ3ZlRFVVbXVEYVdPWVkyS1lsc3ZJU3dvUDVBZnFuSk1FUCtKSXMxQXJqajRGMWcKbzMzN2FPbFRnc3B3WHAyZmRUZWVtM3krZ3hJY3ZULy9jME5nVGMvK05vMnh0bTJIdlpmeUxxb2tXQmY0K3d5MQp1eDZtTU5HUW96bEF0TzM2MXRLZUNJZ1hqRVhwZm52cFRqWkJVUmNtWTRhQnBUeGhYaEMxamsyMTNBSlF0cW5LCjllR0hNcS9PZkpzWTAzZXFSejJqVkJxY3VZR2gzb3d5b2t2WEloMk9EZXIwWTNuamV4NE5OZml5UER0ZCt6VDQKdmNoM3FuRUNnWUVBK0NmMU0ybWlObW9xbXZnQ0g3dzVIRGtMcTEwbzB6dVRBNEJJNmJBYWlrZkd3TUhBQ3VnWQpEcG9Ud3lsbWtldnpuT2dicXo2cEk1R1RiaUlyK1RyRzNYRlBacVlMcTRmc2NONWE4QkdkdXFpMldOTjV6UzIyCm41WjZxV1hUQk1nTHFpcFJEaUVkTHh5UWZDQjJnbTFnd0k5K0NTZEpJMzJ1RStQd2FBNXI5Z3NDZ1lFQXhQUjUKdWw5VCs2eXJxU0ZZcTNOeDY3SENuSStmNnJHU0R0VXhJWTJUUWQ0cFFlak5jdDVaWkpMejRURGxXS1NWbVBFeQpPNHlvUGV4UGx2bWVGeUlQYVpWYTlQMzlTdVBuRnUvcS9WVHF5c090WWY5SjBLYTVQVzNsdU00ZmhsbUF6SlhlCkM2TzNjT1NFbWZUU25XazY1Nzl4WWUySTRTbCtqazlxS2ZidjlGa0NnWUVBbUhpY25NRTdyS2xna2lUdDBTZnEKQXlBOXZrV1lEdWxjczlyL2NhNEZNSTlYWEJudmNBUVl1K2dKV25FMmwxUGRNN3dkUEFOZEV3Q2dFQndvM3BJeAptOS9DQkhUaldMcEVHVGxWc0lseVd6ek1CUm15amRHWGtzaDNoMXVMNHpVeWpaUkFoeWpyY0lYaGRKTFJuZU9zCmZjUHNrWjAwdi95NWwza0d2amlXTnU4Q2dZRUFxKzRtblRVK1lRTDR6eW5XOThSTmZFeXU4SERJVHQ0My9FN0wKRnRrNTVWUUVmQTYzMmtDVGxLSmIxd2NTRG5HT1RmYXZ2U0FxZGZQbC9vdGxJQmlSajcvYnFPWlh5SnB1VHEyZApXd3hYOGkwakc5cjVHdldQMnpvbVFVOWVZYStjS2Z2aDNCTk12WFllOHk2dTlNNjVwemlOeDhqTnBwRE1jM3FMCjJKcENHZkVDZ1lFQXl2aEc2RVdvVnlmSmo2K2RuY3dRL2NMcTY5ckZVSWx4VWZXLzZZREFNQUhVcEw5YVBwRTgKelpwMHI0Q1FaQXIrRFBzd3h3dmZpejZBMUVrbXY4WCt1WjlBYlRUb2MrM3VjSlFpR3E5dU1wdGVCTDFrM0ZMWApJT0hsMWtPTlUyMXFwWTRteEpCeGNxZjdGbmcraTVxV05QY2tzL0x2dUdTODQ0SlVzNkVySlJzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
ubuntu@wv05:~$ cat /etc/containers/registries.conf
# For more information on this configuration file, see containers-registries.conf(5).
#
# NOTE: RISK OF USING UNQUALIFIED IMAGE NAMES
# We recommend always using fully qualified image names including the registry
# server (full dns name), namespace, image name, and tag
# (e.g., registry.redhat.io/ubi8/ubi:latest). Pulling by digest (i.e.,
# quay.io/repository/name@digest) further eliminates the ambiguity of tags.
# When using short names, there is always an inherent risk that the image being
# pulled could be spoofed. For example, a user wants to pull an image named
# `foobar` from a registry and expects it to come from myregistry.com. If
# myregistry.com is not first in the search list, an attacker could place a
# different `foobar` image at a registry earlier in the search list. The user
# would accidentally pull and run the attacker's image and code rather than the
# intended content. We recommend only adding registries which are completely
# trusted (i.e., registries which don't allow unknown or anonymous users to
# create accounts with arbitrary names). This will prevent an image from being
# spoofed, squatted or otherwise made insecure.  If it is necessary to use one
# of these registries, it should be added at the end of the list.
#
# # An array of host[:port] registries to try when pulling an unqualified image, in order.
# unqualified-search-registries = ["example.com"]
#
# [[registry]]
# # The "prefix" field is used to choose the relevant [[registry]] TOML table;
# # (only) the TOML table with the longest match for the input image name
# # (taking into account namespace/repo/tag/digest separators) is used.
# #
# # The prefix can also be of the form: *.example.com for wildcard subdomain
# # matching.
# #
# # If the prefix field is missing, it defaults to be the same as the "location" field.
# prefix = "example.com/foo"
#
# # If true, unencrypted HTTP as well as TLS connections with untrusted
# # certificates are allowed.
# insecure = false
#
# # If true, pulling images with matching names is forbidden.
# blocked = false
#
# # The physical location of the "prefix"-rooted namespace.
# #
# # By default, this is equal to "prefix" (in which case "prefix" can be omitted
# # and the [[registry]] TOML table can only specify "location").
# #
# # Example: Given
# #   prefix = "example.com/foo"
# #   location = "internal-registry-for-example.net/bar"
# # requests for the image example.com/foo/myimage:latest will actually work with the
# # internal-registry-for-example.net/bar/myimage:latest image.
#
# # The location can be empty iff prefix is in a
# # wildcarded format: "*.example.com". In this case, the input reference will
# # be used as-is without any rewrite.
# location = internal-registry-for-example.com/bar"
#
# # (Possibly-partial) mirrors for the "prefix"-rooted namespace.
# #
# # The mirrors are attempted in the specified order; the first one that can be
# # contacted and contains the image will be used (and if none of the mirrors contains the image,
# # the primary location specified by the "registry.location" field, or using the unmodified
# # user-specified reference, is tried last).
# #
# # Each TOML table in the "mirror" array can contain the following fields, with the same semantics
# # as if specified in the [[registry]] TOML table directly:
# # - location
# # - insecure
# [[registry.mirror]]
# location = "example-mirror-0.local/mirror-for-foo"
# [[registry.mirror]]
# location = "example-mirror-1.local/mirrors/foo"
# insecure = true
# # Given the above, a pull of example.com/foo/image:latest will try:
# # 1. example-mirror-0.local/mirror-for-foo/image:latest
# # 2. example-mirror-1.local/mirrors/foo/image:latest
# # 3. internal-registry-for-example.net/bar/image:latest
# # in order, and use the first one that exists.
 unqualified-search-registries=["docker.io"]
#
ubuntu@wv05:~$ kubectl version
WARNING: This version information is deprecated and will be replaced with the output from kubectl version --short.  Use --output=yaml|json to get the full version.
Client Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.0", GitCommit:"a866cbe2e5bbaa01cfd5e969aa3e033f3282a8a2", GitTreeState:"clean", BuildDate:"2022-08-23T17:44:59Z", GoVersion:"go1.19", Compiler:"gc", Platform:"linux/amd64"}
Kustomize Version: v4.5.7
Server Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.0", GitCommit:"a866cbe2e5bbaa01cfd5e969aa3e033f3282a8a2", GitTreeState:"clean", BuildDate:"2022-08-23T17:38:15Z", GoVersion:"go1.19", Compiler:"gc", Platform:"linux/amd64"}
ubuntu@wv05:~$ docker --version
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
podman version 3.4.4
ubuntu@wv05:~$ containerd --version
containerd containerd.io 1.6.8 9cd3357b7fd7218e4aec3eae239db1f68a5a6ec6
ubuntu@wv05:~$
